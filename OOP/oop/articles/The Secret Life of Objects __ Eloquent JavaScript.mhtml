From: <Saved by Blink>
Snapshot-Content-Location: https://eloquentjavascript.net/06_object.html
Subject: The Secret Life of Objects :: Eloquent JavaScript
Date: Wed, 22 May 2024 11:10:35 -0400
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--tnlCDEymNh4kqPAHYgyDfFLtftrP4FXhODZa0L28jl----"


------MultipartBoundary--tnlCDEymNh4kqPAHYgyDfFLtftrP4FXhODZa0L28jl----
Content-Type: text/html
Content-ID: <frame-97A1B436EA79EB0278BDAE8FDEFEC5F7@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://eloquentjavascript.net/06_object.html

<!DOCTYPE html><html><head><meta http-equiv=3D"Content-Type" content=3D"tex=
t/html; charset=3DUTF-8"><link rel=3D"stylesheet" type=3D"text/css" href=3D=
"cid:css-da45f11f-783f-410d-9db3-116f108f0107@mhtml.blink" /><link rel=3D"s=
tylesheet" type=3D"text/css" href=3D"cid:css-b7da941a-d24f-4965-bdee-95f59c=
3ff4c4@mhtml.blink" /><link rel=3D"stylesheet" type=3D"text/css" href=3D"ci=
d:css-e23df0c6-bacf-42e9-b34d-2dbf1a51ecf6@mhtml.blink" /><link rel=3D"styl=
esheet" type=3D"text/css" href=3D"cid:css-814b7fc3-8444-4c63-bc5a-24057f6ff=
70b@mhtml.blink" />
 =20
  <meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=3D=
1">
  <title>The Secret Life of Objects :: Eloquent JavaScript</title>
  <link rel=3D"stylesheet" href=3D"https://eloquentjavascript.net/css/ejs.c=
ss"></head>

<body data-new-gr-c-s-check-loaded=3D"14.1173.0" data-gr-ext-installed=3D""=
><article>
<nav><a href=3D"https://eloquentjavascript.net/05_higher_order.html" title=
=3D"previous chapter" aria-label=3D"previous chapter">=E2=97=82</a>&nbsp;<a=
 href=3D"https://eloquentjavascript.net/index.html" title=3D"cover" aria-la=
bel=3D"cover">=E2=97=8F</a>&nbsp;<a href=3D"https://eloquentjavascript.net/=
07_robot.html" title=3D"next chapter" aria-label=3D"next chapter">=E2=96=B8=
</a>&nbsp;<button class=3D"help" title=3D"help" aria-label=3D"help" style=
=3D"display: inline;"><strong>?</strong></button>
</nav>

<h1>The Secret Life of Objects</h1>

<blockquote>

<p><a class=3D"p_ident" id=3D"p-YG3CSlP9V6" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-YG3CSlP9V6" tabindex=3D"-1" role=3D"presentation">=
</a>An abstract data type is realized by writing a special kind of program =
[=E2=80=A6] which defines the type in terms of the operations which can be =
performed on it.</p>

<footer>Barbara Liskov, <cite>Programming with Abstract Data Types</cite></=
footer>

</blockquote><figure class=3D"chapter framed"><img src=3D"https://eloquentj=
avascript.net/img/chapter_picture_6.jpg" alt=3D"Illustration of a rabbit ne=
xt to its prototype, a schematic representation of a rabbit"></figure>

<p><a class=3D"p_ident" id=3D"p-J5TJX9ZOxz" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-J5TJX9ZOxz" tabindex=3D"-1" role=3D"presentation">=
</a><a href=3D"https://eloquentjavascript.net/04_data.html">Chapter 4</a> i=
ntroduced JavaScript=E2=80=99s objects as containers that hold other data.<=
/p>

<p><a class=3D"p_ident" id=3D"p-/6jGxqPemr" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-/6jGxqPemr" tabindex=3D"-1" role=3D"presentation">=
</a>In programming culture, <em>object-oriented programming</em> is a set o=
f techniques that use objects as the central principle of program organizat=
ion. Though no one really agrees on its precise definition, object-oriented=
 programming has shaped the design of many programming languages, including=
 JavaScript. This chapter describes the way these ideas can be applied in J=
avaScript.</p>

<h2><a class=3D"h_ident" id=3D"h-3RxBerAxmw" href=3D"https://eloquentjavasc=
ript.net/06_object.html#h-3RxBerAxmw" tabindex=3D"-1" role=3D"presentation"=
></a>Abstract Data Types</h2>

<p><a class=3D"p_ident" id=3D"p-eNejU48PIs" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-eNejU48PIs" tabindex=3D"-1" role=3D"presentation">=
</a>The main idea in object-oriented programming is to use objects, or rath=
er <em>types</em> of objects, as the unit of program organization. Setting =
up a program as a number of strictly separated object types provides a way =
to think about its structure and thus to enforce some kind of discipline, p=
reventing everything from becoming entangled.</p>

<p><a class=3D"p_ident" id=3D"p-yhX9plqp8k" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-yhX9plqp8k" tabindex=3D"-1" role=3D"presentation">=
</a>The way to do this is to think of objects somewhat like you=E2=80=99d t=
hink of an electric mixer or other consumer appliance. The people who desig=
n and assemble a mixer have to do specialized work requiring material scien=
ce and understanding of electricity. They cover all that up in a smooth pla=
stic shell so that the people who only want to mix pancake batter don=E2=80=
=99t have to worry about all that=E2=80=94they only have to understand the =
few knobs that the mixer can be operated with.</p>

<p><a class=3D"p_ident" id=3D"p-DCKe4JumwB" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-DCKe4JumwB" tabindex=3D"-1" role=3D"presentation">=
</a>Similarly, an <em>abstract data type</em>, or <em>object class</em>, is=
 a subprogram that may contain arbitrarily complicated code but exposes a l=
imited set of methods and properties that people working with it are suppos=
ed to use. This allows large programs to be built up out of a number of app=
liance types, limiting the degree to which these different parts are entang=
led by requiring them to only interact with each other in specific ways.</p=
>

<p><a class=3D"p_ident" id=3D"p-mYO5GEpl2m" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-mYO5GEpl2m" tabindex=3D"-1" role=3D"presentation">=
</a>If a problem is found in one such object class, it can often be repaire=
d or even completely rewritten without impacting the rest of the program. E=
ven better, it may be possible to use object classes in multiple different =
programs, avoiding the need to recreate their functionality from scratch. Y=
ou can think of JavaScript=E2=80=99s built-in data structures, such as arra=
ys and strings, as such reusable abstract data types.</p>

<p id=3D"interface"><a class=3D"p_ident" id=3D"p-tyK5Q1Zja4" href=3D"https:=
//eloquentjavascript.net/06_object.html#p-tyK5Q1Zja4" tabindex=3D"-1" role=
=3D"presentation"></a>Each abstract data type has an <em>interface</em>, th=
e collection of operations that external code can perform on it. Any detail=
s beyond that interface are <em>encapsulated</em>, treated as internal to t=
he type and of no concern to the rest of the program.</p>

<p><a class=3D"p_ident" id=3D"p-JdDMZDr/nS" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-JdDMZDr/nS" tabindex=3D"-1" role=3D"presentation">=
</a>Even basic things like numbers can be thought of as an abstract data ty=
pe whose interface allows us to add them, multiply them, compare them, and =
so on. In fact, the fixation on single <em>objects</em> as the main unit of=
 organization in classical object-oriented programming is somewhat unfortun=
ate since useful pieces of functionality often involve a group of different=
 object classes working closely together.</p>

<h2 id=3D"obj_methods"><a class=3D"h_ident" id=3D"h-fkrGgDyRWc" href=3D"htt=
ps://eloquentjavascript.net/06_object.html#h-fkrGgDyRWc" tabindex=3D"-1" ro=
le=3D"presentation"></a>Methods</h2>

<p><a class=3D"p_ident" id=3D"p-Pu7Fh3a5uT" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-Pu7Fh3a5uT" tabindex=3D"-1" role=3D"presentation">=
</a>In JavaScript, methods are nothing more than properties that hold funct=
ion values. This is a simple method:</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-gpJkdAdyIu" href=3D"https://eloquentjavascript.net/06_=
object.html#c-gpJkdAdyIu" tabindex=3D"-1" role=3D"presentation"></a><span c=
lass=3D"tok-keyword">function</span> <span class=3D"tok-definition">speak</=
span>(<span class=3D"tok-definition">line</span>) {
  console.log(<span class=3D"tok-string2">`The </span>${<span class=3D"tok-=
keyword">this</span>.type}<span class=3D"tok-string2"> rabbit says '</span>=
${line}<span class=3D"tok-string2">'`</span>);
}
<span class=3D"tok-keyword">let</span> <span class=3D"tok-definition">white=
Rabbit</span> =3D {<span class=3D"tok-definition">type</span>: <span class=
=3D"tok-string">"white"</span>, <span class=3D"tok-definition">speak</span>=
};
<span class=3D"tok-keyword">let</span> <span class=3D"tok-definition">hungr=
yRabbit</span> =3D {<span class=3D"tok-definition">type</span>: <span class=
=3D"tok-string">"hungry"</span>, <span class=3D"tok-definition">speak</span=
>};

whiteRabbit.speak(<span class=3D"tok-string">"Oh my fur and whiskers"</span=
>);
<span class=3D"tok-comment">// =E2=86=92 The white rabbit says 'Oh my fur a=
nd whiskers'</span>
hungryRabbit.speak(<span class=3D"tok-string">"Got any carrots?"</span>);
<span class=3D"tok-comment">// =E2=86=92 The hungry rabbit says 'Got any ca=
rrots?'</span></pre>

<p><a class=3D"p_ident" id=3D"p-mV9fNbDP5i" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-mV9fNbDP5i" tabindex=3D"-1" role=3D"presentation">=
</a>Typically a method needs to do something with the object on which it wa=
s called. When a function is called as a method=E2=80=94looked up as a prop=
erty and immediately called, as in <code>object.method()</code>=E2=80=94the=
 binding called <code>this</code> in its body automatically points at the o=
bject on which it was called.</p>

<p id=3D"call_method"><a class=3D"p_ident" id=3D"p-llBwR5t6LB" href=3D"http=
s://eloquentjavascript.net/06_object.html#p-llBwR5t6LB" tabindex=3D"-1" rol=
e=3D"presentation"></a>You can think of <code>this</code> as an extra param=
eter that is passed to the function in a different way than regular paramet=
ers. If you want to provide it explicitly, you can use a function=E2=80=99s=
 <code>call</code> method, which takes the <code>this</code> value as its f=
irst argument and treats further arguments as normal parameters.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-TCnkkQJ0hO" href=3D"https://eloquentjavascript.net/06_=
object.html#c-TCnkkQJ0hO" tabindex=3D"-1" role=3D"presentation"></a>speak.c=
all(whiteRabbit, <span class=3D"tok-string">"Hurry"</span>);
<span class=3D"tok-comment">// =E2=86=92 The white rabbit says 'Hurry'</spa=
n></pre>

<p><a class=3D"p_ident" id=3D"p-8ZeOAlGKXe" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-8ZeOAlGKXe" tabindex=3D"-1" role=3D"presentation">=
</a>Since each function has its own <code>this</code> binding whose value d=
epends on the way it is called, you cannot refer to the <code>this</code> o=
f the wrapping scope in a regular function defined with the <code>function<=
/code> keyword.</p>

<p><a class=3D"p_ident" id=3D"p-EHZMeuTOUD" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-EHZMeuTOUD" tabindex=3D"-1" role=3D"presentation">=
</a>Arrow functions are different=E2=80=94they do not bind their own <code>=
this</code> but can see the <code>this</code> binding of the scope around t=
hem. Thus, you can do something like the following code, which references <=
code>this</code> from inside a local function:</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-pPGE9nUDA9" href=3D"https://eloquentjavascript.net/06_=
object.html#c-pPGE9nUDA9" tabindex=3D"-1" role=3D"presentation"></a><span c=
lass=3D"tok-keyword">let</span> <span class=3D"tok-definition">finder</span=
> =3D {
  <span class=3D"tok-definition">find</span>(<span class=3D"tok-definition"=
>array</span>) {
    <span class=3D"tok-keyword">return</span> array.some(<span class=3D"tok=
-definition">v</span> =3D&gt; v =3D=3D <span class=3D"tok-keyword">this</sp=
an>.value);
  },
  <span class=3D"tok-definition">value</span>: <span class=3D"tok-number">5=
</span>
};
console.log(finder.find([<span class=3D"tok-number">4</span>, <span class=
=3D"tok-number">5</span>]));
<span class=3D"tok-comment">// =E2=86=92 true</span></pre>

<p><a class=3D"p_ident" id=3D"p-eBm7AuQUBb" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-eBm7AuQUBb" tabindex=3D"-1" role=3D"presentation">=
</a>A property like <code>find(array)</code> in an object expression is a s=
horthand way of defining a method. It creates a property called <code>find<=
/code> and gives it a function as its value.</p>

<p><a class=3D"p_ident" id=3D"p-YkWiHcMuVP" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-YkWiHcMuVP" tabindex=3D"-1" role=3D"presentation">=
</a>If I had written the argument to <code>some</code> using the <code>func=
tion</code> keyword, this code wouldn=E2=80=99t work.</p>

<h2 id=3D"prototypes"><a class=3D"h_ident" id=3D"h-SumMlRB7yn" href=3D"http=
s://eloquentjavascript.net/06_object.html#h-SumMlRB7yn" tabindex=3D"-1" rol=
e=3D"presentation"></a>Prototypes</h2>

<p><a class=3D"p_ident" id=3D"p-Xey+sIju1M" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-Xey+sIju1M" tabindex=3D"-1" role=3D"presentation">=
</a>One way to create a rabbit object type with a <code>speak</code> method=
 would be to create a helper function that has a rabbit type as parameter a=
nd returns an object holding that as its <code>type</code> property and our=
 speak function in its <code>speak</code> property.</p>

<p><a class=3D"p_ident" id=3D"p-1rvfUl6glP" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-1rvfUl6glP" tabindex=3D"-1" role=3D"presentation">=
</a>All rabbits share that same method. Especially for types with many meth=
ods, it would be nice if there was a way to keep a type=E2=80=99s methods i=
n a single place, rather than adding them to each object individually.</p>

<p><a class=3D"p_ident" id=3D"p-Gr4D0QWq9y" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-Gr4D0QWq9y" tabindex=3D"-1" role=3D"presentation">=
</a>In JavaScript, <em>prototypes</em> are the way to do that. Objects can =
be linked to other objects, to magically get all the properties that other =
object has. Plain old objects created with <code>{}</code> notation are lin=
ked to an object called <code>Object.prototype</code>.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-P0GVdA5c8J" href=3D"https://eloquentjavascript.net/06_=
object.html#c-P0GVdA5c8J" tabindex=3D"-1" role=3D"presentation"></a><span c=
lass=3D"tok-keyword">let</span> <span class=3D"tok-definition">empty</span>=
 =3D {};
console.log(empty.toString);
<span class=3D"tok-comment">// =E2=86=92 function toString(){=E2=80=A6}</sp=
an>
console.log(empty.toString());
<span class=3D"tok-comment">// =E2=86=92 [object Object]</span></pre>

<p><a class=3D"p_ident" id=3D"p-brQdKaRo2W" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-brQdKaRo2W" tabindex=3D"-1" role=3D"presentation">=
</a>It looks like we just pulled a property out of an empty object. But in =
fact, <code>toString</code> is a method stored in <code>Object.prototype</c=
ode>, meaning it is available in most objects.</p>

<p><a class=3D"p_ident" id=3D"p-Bf6y/uAWB+" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-Bf6y/uAWB+" tabindex=3D"-1" role=3D"presentation">=
</a>When an object gets a request for a property that it doesn=E2=80=99t ha=
ve, its prototype will be searched for the property. If that doesn=E2=80=99=
t have it, the <em>prototype=E2=80=99s</em> prototype is searched, and so o=
n until an object without prototype is reached (<code>Object.prototype</cod=
e> is such an object).</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-OQZG/UHNHD" href=3D"https://eloquentjavascript.net/06_=
object.html#c-OQZG/UHNHD" tabindex=3D"-1" role=3D"presentation"></a>console=
.log(Object.getPrototypeOf({}) =3D=3D Object.prototype);
<span class=3D"tok-comment">// =E2=86=92 true</span>
console.log(Object.getPrototypeOf(Object.prototype));
<span class=3D"tok-comment">// =E2=86=92 null</span></pre>

<p><a class=3D"p_ident" id=3D"p-72z+PtqY66" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-72z+PtqY66" tabindex=3D"-1" role=3D"presentation">=
</a>As you=E2=80=99d guess, <code>Object.<wbr>getPrototypeOf</code> returns=
 the prototype of an object.</p>

<p><a class=3D"p_ident" id=3D"p-I5k2LdMhlJ" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-I5k2LdMhlJ" tabindex=3D"-1" role=3D"presentation">=
</a>Many objects don=E2=80=99t directly have <code>Object.prototype</code> =
as their prototype but instead have another object that provides a differen=
t set of default properties. Functions derive from <code>Function.<wbr>prot=
otype</code> and arrays derive from <code>Array.prototype</code>.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-u0Ich5CNwz" href=3D"https://eloquentjavascript.net/06_=
object.html#c-u0Ich5CNwz" tabindex=3D"-1" role=3D"presentation"></a>console=
.log(Object.getPrototypeOf(Math.max) =3D=3D
            Function.prototype);
<span class=3D"tok-comment">// =E2=86=92 true</span>
console.log(Object.getPrototypeOf([]) =3D=3D Array.prototype);
<span class=3D"tok-comment">// =E2=86=92 true</span></pre>

<p><a class=3D"p_ident" id=3D"p-1fIXMD62Nu" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-1fIXMD62Nu" tabindex=3D"-1" role=3D"presentation">=
</a>Such a prototype object will itself have a prototype, often <code>Objec=
t.prototype</code>, so that it still indirectly provides methods like <code=
>toString</code>.</p>

<p><a class=3D"p_ident" id=3D"p-3gbFvusn2U" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-3gbFvusn2U" tabindex=3D"-1" role=3D"presentation">=
</a>You can use <code>Object.create</code> to create an object with a speci=
fic prototype:</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-VtvGZpf42G" href=3D"https://eloquentjavascript.net/06_=
object.html#c-VtvGZpf42G" tabindex=3D"-1" role=3D"presentation"></a><span c=
lass=3D"tok-keyword">let</span> <span class=3D"tok-definition">protoRabbit<=
/span> =3D {
  <span class=3D"tok-definition">speak</span>(<span class=3D"tok-definition=
">line</span>) {
    console.log(<span class=3D"tok-string2">`The </span>${<span class=3D"to=
k-keyword">this</span>.type}<span class=3D"tok-string2"> rabbit says '</spa=
n>${line}<span class=3D"tok-string2">'`</span>);
  }
};
<span class=3D"tok-keyword">let</span> <span class=3D"tok-definition">black=
Rabbit</span> =3D Object.create(protoRabbit);
blackRabbit.type =3D <span class=3D"tok-string">"black"</span>;
blackRabbit.speak(<span class=3D"tok-string">"I am fear and darkness"</span=
>);
<span class=3D"tok-comment">// =E2=86=92 The black rabbit says 'I am fear a=
nd darkness'</span></pre>

<p><a class=3D"p_ident" id=3D"p-y8kzFoQw1W" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-y8kzFoQw1W" tabindex=3D"-1" role=3D"presentation">=
</a>The =E2=80=9Cproto=E2=80=9D rabbit acts as a container for the properti=
es shared by all rabbits. An individual rabbit object, like the black rabbi=
t, contains properties that apply only to itself=E2=80=94in this case its t=
ype=E2=80=94and derives shared properties from its prototype.</p>

<h2 id=3D"classes"><a class=3D"h_ident" id=3D"h-7RhGr+474h" href=3D"https:/=
/eloquentjavascript.net/06_object.html#h-7RhGr+474h" tabindex=3D"-1" role=
=3D"presentation"></a>Classes</h2>

<p><a class=3D"p_ident" id=3D"p-UUexyXQvqM" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-UUexyXQvqM" tabindex=3D"-1" role=3D"presentation">=
</a>JavaScript=E2=80=99s prototype system can be interpreted as a somewhat =
free-form take on abstract data types or classes. A <em>class</em> defines =
the shape of a type of object=E2=80=94what methods and properties it has. S=
uch an object is called an <em>instance</em> of the class.</p>

<p><a class=3D"p_ident" id=3D"p-GhnffIpINq" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-GhnffIpINq" tabindex=3D"-1" role=3D"presentation">=
</a>Prototypes are useful for defining properties for which all instances o=
f a class share the same value. Properties that differ per instance, such a=
s our rabbits=E2=80=99 <code>type</code> property, need to be stored direct=
ly in the objects themselves.</p>

<p id=3D"constructors"><a class=3D"p_ident" id=3D"p-CblAFY2NtT" href=3D"htt=
ps://eloquentjavascript.net/06_object.html#p-CblAFY2NtT" tabindex=3D"-1" ro=
le=3D"presentation"></a>To create an instance of a given class, you have to=
 make an object that derives from the proper prototype, but you <em>also</e=
m> have to make sure it itself has the properties that instances of this cl=
ass are supposed to have. This is what a <em>constructor</em> function does=
.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-oOKUeIzSVa" href=3D"https://eloquentjavascript.net/06_=
object.html#c-oOKUeIzSVa" tabindex=3D"-1" role=3D"presentation"></a><span c=
lass=3D"tok-keyword">function</span> <span class=3D"tok-definition">makeRab=
bit</span>(<span class=3D"tok-definition">type</span>) {
  <span class=3D"tok-keyword">let</span> <span class=3D"tok-definition">rab=
bit</span> =3D Object.create(protoRabbit);
  rabbit.type =3D type;
  <span class=3D"tok-keyword">return</span> rabbit;
}</pre>

<p><a class=3D"p_ident" id=3D"p-l0nhds/qNG" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-l0nhds/qNG" tabindex=3D"-1" role=3D"presentation">=
</a>JavaScript=E2=80=99s class notation makes it easier to define this type=
 of function, along with a prototype object.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-kK/n/pIZ0u" href=3D"https://eloquentjavascript.net/06_=
object.html#c-kK/n/pIZ0u" tabindex=3D"-1" role=3D"presentation"></a><span c=
lass=3D"tok-keyword">class</span> Rabbit {
  <span class=3D"tok-definition">constructor</span>(<span class=3D"tok-defi=
nition">type</span>) {
    <span class=3D"tok-keyword">this</span>.type =3D type;
  }
  <span class=3D"tok-definition">speak</span>(<span class=3D"tok-definition=
">line</span>) {
    console.log(<span class=3D"tok-string2">`The </span>${<span class=3D"to=
k-keyword">this</span>.type}<span class=3D"tok-string2"> rabbit says '</spa=
n>${line}<span class=3D"tok-string2">'`</span>);
  }
}</pre>

<p><a class=3D"p_ident" id=3D"p-36Q8vg+cYn" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-36Q8vg+cYn" tabindex=3D"-1" role=3D"presentation">=
</a>The <code>class</code> keyword starts a class declaration, which allows=
 us to define a constructor and a set of methods together. Any number of me=
thods may be written inside the declaration=E2=80=99s braces. This code has=
 the effect of defining a binding called <code>Rabbit</code>, which holds a=
 function that runs the code in <code>constructor</code> and has a <code>pr=
ototype</code> property which holds the <code>speak</code> method.</p>

<p><a class=3D"p_ident" id=3D"p-aj+QKGR28Z" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-aj+QKGR28Z" tabindex=3D"-1" role=3D"presentation">=
</a>This function cannot be called like a normal function. Constructors, in=
 JavaScript, are called by putting the keyword <code>new</code> in front of=
 them. Doing so creates a fresh instance object whose prototype is the obje=
ct from the function=E2=80=99s <code>prototype</code> property, then runs t=
he function with <code>this</code> bound to the new object, and finally ret=
urns the object.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-1bL3TMgYRb" href=3D"https://eloquentjavascript.net/06_=
object.html#c-1bL3TMgYRb" tabindex=3D"-1" role=3D"presentation"></a><span c=
lass=3D"tok-keyword">let</span> <span class=3D"tok-definition">killerRabbit=
</span> =3D <span class=3D"tok-keyword">new</span> Rabbit(<span class=3D"to=
k-string">"killer"</span>);</pre>

<p><a class=3D"p_ident" id=3D"p-uM0RM9gow9" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-uM0RM9gow9" tabindex=3D"-1" role=3D"presentation">=
</a>In fact, <code>class</code> was only introduced in the 2015 edition of =
JavaScript. Any function can be used as a constructor, and before 2015, the=
 way to define a class was to write a regular function and then manipulate =
its <code>prototype</code> property.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-IPS9bWussR" href=3D"https://eloquentjavascript.net/06_=
object.html#c-IPS9bWussR" tabindex=3D"-1" role=3D"presentation"></a><span c=
lass=3D"tok-keyword">function</span> <span class=3D"tok-definition">Archaic=
Rabbit</span>(<span class=3D"tok-definition">type</span>) {
  <span class=3D"tok-keyword">this</span>.type =3D type;
}
ArchaicRabbit.prototype.speak =3D <span class=3D"tok-keyword">function</spa=
n>(<span class=3D"tok-definition">line</span>) {
  console.log(<span class=3D"tok-string2">`The </span>${<span class=3D"tok-=
keyword">this</span>.type}<span class=3D"tok-string2"> rabbit says '</span>=
${line}<span class=3D"tok-string2">'`</span>);
};
<span class=3D"tok-keyword">let</span> <span class=3D"tok-definition">oldSc=
hoolRabbit</span> =3D <span class=3D"tok-keyword">new</span> ArchaicRabbit(=
<span class=3D"tok-string">"old school"</span>);</pre>

<p><a class=3D"p_ident" id=3D"p-CuN6BIS6u9" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-CuN6BIS6u9" tabindex=3D"-1" role=3D"presentation">=
</a>For this reason, all non-arrow functions start with a <code>prototype</=
code> property holding an empty object.</p>

<p><a class=3D"p_ident" id=3D"p-DJG7BO1oTU" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-DJG7BO1oTU" tabindex=3D"-1" role=3D"presentation">=
</a>By convention, the names of constructors are capitalized so that they c=
an easily be distinguished from other functions.</p>

<p><a class=3D"p_ident" id=3D"p-XAOLARTe5Y" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-XAOLARTe5Y" tabindex=3D"-1" role=3D"presentation">=
</a>It is important to understand the distinction between the way a prototy=
pe is associated with a constructor (through its <code>prototype</code> pro=
perty) and the way objects <em>have</em> a prototype (which can be found wi=
th <code>Object.<wbr>getPrototypeOf</code>). The actual prototype of a cons=
tructor is <code>Function.<wbr>prototype</code> since constructors are func=
tions. The constructor function=E2=80=99s <code>prototype</code> <em>proper=
ty</em> holds the prototype used for instances created through it.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-Q/QbNN+9Zh" href=3D"https://eloquentjavascript.net/06_=
object.html#c-Q/QbNN+9Zh" tabindex=3D"-1" role=3D"presentation"></a>console=
.log(Object.getPrototypeOf(Rabbit) =3D=3D
            Function.prototype);
<span class=3D"tok-comment">// =E2=86=92 true</span>
console.log(Object.getPrototypeOf(killerRabbit) =3D=3D
            Rabbit.prototype);
<span class=3D"tok-comment">// =E2=86=92 true</span></pre>

<p><a class=3D"p_ident" id=3D"p-oW8JeJp9jN" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-oW8JeJp9jN" tabindex=3D"-1" role=3D"presentation">=
</a>Constructors will typically add some per-instance properties to <code>t=
his</code>. It is also possible to declare properties directly in the class=
 declaration. Unlike methods, such properties are added to instance objects=
 and not the prototype.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-KBHDrbFbxX" href=3D"https://eloquentjavascript.net/06_=
object.html#c-KBHDrbFbxX" tabindex=3D"-1" role=3D"presentation"></a><span c=
lass=3D"tok-keyword">class</span> Particle {
  <span class=3D"tok-definition">speed</span> =3D <span class=3D"tok-number=
">0</span>;
  <span class=3D"tok-definition">constructor</span>(<span class=3D"tok-defi=
nition">position</span>) {
    <span class=3D"tok-keyword">this</span>.position =3D position;
  }
}</pre>

<p><a class=3D"p_ident" id=3D"p-pp17mMu8If" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-pp17mMu8If" tabindex=3D"-1" role=3D"presentation">=
</a>Like <code>function</code>, <code>class</code> can be used both in stat=
ements and in expressions. When used as an expression, it doesn=E2=80=99t d=
efine a binding but just produces the constructor as a value. You are allow=
ed to omit the class name in a class expression.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-79re+GWcTJ" href=3D"https://eloquentjavascript.net/06_=
object.html#c-79re+GWcTJ" tabindex=3D"-1" role=3D"presentation"></a><span c=
lass=3D"tok-keyword">let</span> <span class=3D"tok-definition">object</span=
> =3D <span class=3D"tok-keyword">new</span> <span class=3D"tok-keyword">cl=
ass</span> { <span class=3D"tok-definition">getWord</span>() { <span class=
=3D"tok-keyword">return</span> <span class=3D"tok-string">"hello"</span>; }=
 };
console.log(object.getWord());
<span class=3D"tok-comment">// =E2=86=92 hello</span></pre>

<h2><a class=3D"h_ident" id=3D"h-u5kICdau5v" href=3D"https://eloquentjavasc=
ript.net/06_object.html#h-u5kICdau5v" tabindex=3D"-1" role=3D"presentation"=
></a>Private Properties</h2>

<p><a class=3D"p_ident" id=3D"p-0kMziy4cl6" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-0kMziy4cl6" tabindex=3D"-1" role=3D"presentation">=
</a>It is common for classes to define some properties and methods for inte=
rnal use that are not part of their interface. These are called <em>private=
</em> properties, as opposed to <em>public</em> ones, which are part of the=
 object=E2=80=99s external interface.</p>

<p><a class=3D"p_ident" id=3D"p-E/yzjVpbO7" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-E/yzjVpbO7" tabindex=3D"-1" role=3D"presentation">=
</a>To declare a private method, put a <code>#</code> sign in front of its =
name. Such methods can only be called from inside the <code>class</code> de=
claration that defines them.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-U0DV3Ggb4o" href=3D"https://eloquentjavascript.net/06_=
object.html#c-U0DV3Ggb4o" tabindex=3D"-1" role=3D"presentation"></a><span c=
lass=3D"tok-keyword">class</span> SecretiveObject {
  <span class=3D"tok-definition">#getSecret</span>() {
    <span class=3D"tok-keyword">return</span> <span class=3D"tok-string">"I=
 ate all the plums"</span>;
  }
  <span class=3D"tok-definition">interrogate</span>() {
    <span class=3D"tok-keyword">let</span> <span class=3D"tok-definition">s=
hallISayIt</span> =3D <span class=3D"tok-keyword">this</span>.#getSecret();
    <span class=3D"tok-keyword">return</span> <span class=3D"tok-string">"n=
ever"</span>;
  }
}</pre>

<p><a class=3D"p_ident" id=3D"p-d2Q4Im6O0z" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-d2Q4Im6O0z" tabindex=3D"-1" role=3D"presentation">=
</a>When a class does not declare a constructor, it will automatically get =
an empty one.</p>

<p><a class=3D"p_ident" id=3D"p-tXQlrwa/XV" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-tXQlrwa/XV" tabindex=3D"-1" role=3D"presentation">=
</a>If you try to call <code>#getSecret</code> from outside the class, you =
get an error. Its existence is entirely hidden inside the class declaration=
.</p>

<p><a class=3D"p_ident" id=3D"p-hJqUlSNXnj" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-hJqUlSNXnj" tabindex=3D"-1" role=3D"presentation">=
</a>To use private instance properties, you must declare them. Regular prop=
erties can be created by just assigning to them, but private properties <em=
>must</em> be declared in the class declaration to be available at all.</p>

<p><a class=3D"p_ident" id=3D"p-ff1k57/G7r" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-ff1k57/G7r" tabindex=3D"-1" role=3D"presentation">=
</a>This class implements an appliance for getting a random whole number be=
low a given maximum number. It only has one public property: <code>getNumbe=
r</code>.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-2bWeku8FvK" href=3D"https://eloquentjavascript.net/06_=
object.html#c-2bWeku8FvK" tabindex=3D"-1" role=3D"presentation"></a><span c=
lass=3D"tok-keyword">class</span> RandomSource {
  <span class=3D"tok-definition">#max</span>;
  <span class=3D"tok-definition">constructor</span>(<span class=3D"tok-defi=
nition">max</span>) {
    <span class=3D"tok-keyword">this</span>.#max =3D max;
  }
  <span class=3D"tok-definition">getNumber</span>() {
    <span class=3D"tok-keyword">return</span> Math.floor(Math.random() * <s=
pan class=3D"tok-keyword">this</span>.#max);
  }
}</pre>

<h2><a class=3D"h_ident" id=3D"h-oUlUep3Os8" href=3D"https://eloquentjavasc=
ript.net/06_object.html#h-oUlUep3Os8" tabindex=3D"-1" role=3D"presentation"=
></a>Overriding derived properties</h2>

<p><a class=3D"p_ident" id=3D"p-Xbxf2Ooo0z" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-Xbxf2Ooo0z" tabindex=3D"-1" role=3D"presentation">=
</a>When you add a property to an object, whether it is present in the prot=
otype or not, the property is added to the object <em>itself</em>. If there=
 was already a property with the same name in the prototype, this property =
will no longer affect the object, as it is now hidden behind the object=E2=
=80=99s own property.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-iJAj/t1TcS" href=3D"https://eloquentjavascript.net/06_=
object.html#c-iJAj/t1TcS" tabindex=3D"-1" role=3D"presentation"></a>Rabbit.=
prototype.teeth =3D <span class=3D"tok-string">"small"</span>;
console.log(killerRabbit.teeth);
<span class=3D"tok-comment">// =E2=86=92 small</span>
killerRabbit.teeth =3D <span class=3D"tok-string">"long, sharp, and bloody"=
</span>;
console.log(killerRabbit.teeth);
<span class=3D"tok-comment">// =E2=86=92 long, sharp, and bloody</span>
console.log((<span class=3D"tok-keyword">new</span> Rabbit(<span class=3D"t=
ok-string">"basic"</span>)).teeth);
<span class=3D"tok-comment">// =E2=86=92 small</span>
console.log(Rabbit.prototype.teeth);
<span class=3D"tok-comment">// =E2=86=92 small</span></pre>

<p><a class=3D"p_ident" id=3D"p-HM5YtS3KgJ" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-HM5YtS3KgJ" tabindex=3D"-1" role=3D"presentation">=
</a>The following diagram sketches the situation after this code has run. T=
he <code>Rabbit</code> and <code>Object</code> prototypes lie behind <code>=
killerRabbit</code> as a kind of backdrop, where properties that are not fo=
und in the object itself can be looked up.</p><figure><img src=3D"https://e=
loquentjavascript.net/img/rabbits.svg" alt=3D"A diagram showing the object =
structure of rabbits and their prototypes. There is a box for the 'killerRa=
bbit' instance (holding instance properties like 'type'), with its two prot=
otypes, 'Rabbit.prototype' (holding the 'speak' method) and 'Object.prototy=
pe' (holding methods like 'toString') stacked behind it."></figure>

<p><a class=3D"p_ident" id=3D"p-or3/lz1DV8" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-or3/lz1DV8" tabindex=3D"-1" role=3D"presentation">=
</a>Overriding properties that exist in a prototype can be a useful thing t=
o do. As the rabbit teeth example shows, overriding can be used to express =
exceptional properties in instances of a more generic class of objects whil=
e letting the nonexceptional objects take a standard value from their proto=
type.</p>

<p><a class=3D"p_ident" id=3D"p-GIhnbh3MdO" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-GIhnbh3MdO" tabindex=3D"-1" role=3D"presentation">=
</a>Overriding is also used to give the standard function and array prototy=
pes a different <code>toString</code> method than the basic object prototyp=
e.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-DrIRvUgeOD" href=3D"https://eloquentjavascript.net/06_=
object.html#c-DrIRvUgeOD" tabindex=3D"-1" role=3D"presentation"></a>console=
.log(Array.prototype.toString =3D=3D
            Object.prototype.toString);
<span class=3D"tok-comment">// =E2=86=92 false</span>
console.log([<span class=3D"tok-number">1</span>, <span class=3D"tok-number=
">2</span>].toString());
<span class=3D"tok-comment">// =E2=86=92 1,2</span></pre>

<p><a class=3D"p_ident" id=3D"p-tEz1fkdb8y" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-tEz1fkdb8y" tabindex=3D"-1" role=3D"presentation">=
</a>Calling <code>toString</code> on an array gives a result similar to cal=
ling <code>.<wbr>join(",")</code> on it=E2=80=94it puts commas between the =
values in the array. Directly calling <code>Object.<wbr>prototype.<wbr>toSt=
ring</code> with an array produces a different string. That function doesn=
=E2=80=99t know about arrays, so it simply puts the word <em>object</em> an=
d the name of the type between square brackets.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-XpqFUrDFJE" href=3D"https://eloquentjavascript.net/06_=
object.html#c-XpqFUrDFJE" tabindex=3D"-1" role=3D"presentation"></a>console=
.log(Object.prototype.toString.call([<span class=3D"tok-number">1</span>, <=
span class=3D"tok-number">2</span>]));
<span class=3D"tok-comment">// =E2=86=92 [object Array]</span></pre>

<h2><a class=3D"h_ident" id=3D"h-gAcc11EHzV" href=3D"https://eloquentjavasc=
ript.net/06_object.html#h-gAcc11EHzV" tabindex=3D"-1" role=3D"presentation"=
></a>Maps</h2>

<p><a class=3D"p_ident" id=3D"p-5v6QzULS7C" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-5v6QzULS7C" tabindex=3D"-1" role=3D"presentation">=
</a>We saw the word <em>map</em> used in the <a href=3D"https://eloquentjav=
ascript.net/05_higher_order.html#map">previous chapter</a> for an operation=
 that transforms a data structure by applying a function to its elements. C=
onfusing as it is, in programming the same word is used for a related but r=
ather different thing.</p>

<p><a class=3D"p_ident" id=3D"p-++bw9zDmtH" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-++bw9zDmtH" tabindex=3D"-1" role=3D"presentation">=
</a>A <em>map</em> (noun) is a data structure that associates values (the k=
eys) with other values. For example, you might want to map names to ages. I=
t is possible to use objects for this.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-Wu6a8ObZI0" href=3D"https://eloquentjavascript.net/06_=
object.html#c-Wu6a8ObZI0" tabindex=3D"-1" role=3D"presentation"></a><span c=
lass=3D"tok-keyword">let</span> <span class=3D"tok-definition">ages</span> =
=3D {
  <span class=3D"tok-definition">Boris</span>: <span class=3D"tok-number">3=
9</span>,
  <span class=3D"tok-definition">Liang</span>: <span class=3D"tok-number">2=
2</span>,
  <span class=3D"tok-definition">J=C3=BAlia</span>: <span class=3D"tok-numb=
er">62</span>
};

console.log(<span class=3D"tok-string2">`J=C3=BAlia is </span>${ages[<span =
class=3D"tok-string">"J=C3=BAlia"</span>]}<span class=3D"tok-string2">`</sp=
an>);
<span class=3D"tok-comment">// =E2=86=92 J=C3=BAlia is 62</span>
console.log(<span class=3D"tok-string">"Is Jack's age known?"</span>, <span=
 class=3D"tok-string">"Jack"</span> <span class=3D"tok-keyword">in</span> a=
ges);
<span class=3D"tok-comment">// =E2=86=92 Is Jack's age known? false</span>
console.log(<span class=3D"tok-string">"Is toString's age known?"</span>, <=
span class=3D"tok-string">"toString"</span> <span class=3D"tok-keyword">in<=
/span> ages);
<span class=3D"tok-comment">// =E2=86=92 Is toString's age known? true</spa=
n></pre>

<p><a class=3D"p_ident" id=3D"p-EQqc7pcOKT" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-EQqc7pcOKT" tabindex=3D"-1" role=3D"presentation">=
</a>Here, the object=E2=80=99s property names are the people=E2=80=99s name=
s and the property values are their ages. But we certainly didn=E2=80=99t l=
ist anybody named toString in our map. Yet, because plain objects derive fr=
om <code>Object.prototype</code>, it looks like the property is there.</p>

<p><a class=3D"p_ident" id=3D"p-enf1/9ItBM" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-enf1/9ItBM" tabindex=3D"-1" role=3D"presentation">=
</a>As such, using plain objects as maps is dangerous. There are several po=
ssible ways to avoid this problem. First, you can create objects with <em>n=
o</em> prototype. If you pass <code>null</code> to <code>Object.create</cod=
e>, the resulting object will not derive from <code>Object.prototype</code>=
 and can safely be used as a map.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-AkRQLQc4AG" href=3D"https://eloquentjavascript.net/06_=
object.html#c-AkRQLQc4AG" tabindex=3D"-1" role=3D"presentation"></a>console=
.log(<span class=3D"tok-string">"toString"</span> <span class=3D"tok-keywor=
d">in</span> Object.create(<span class=3D"tok-keyword">null</span>));
<span class=3D"tok-comment">// =E2=86=92 false</span></pre>

<p><a class=3D"p_ident" id=3D"p-jGC2iO9E1x" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-jGC2iO9E1x" tabindex=3D"-1" role=3D"presentation">=
</a>Object property names must be strings. If you need a map whose keys can=
=E2=80=99t easily be converted to strings=E2=80=94such as objects=E2=80=94y=
ou cannot use an object as your map.</p>

<p><a class=3D"p_ident" id=3D"p-7YowpbSrOa" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-7YowpbSrOa" tabindex=3D"-1" role=3D"presentation">=
</a>Fortunately, JavaScript comes with a class called <code>Map</code> that=
 is written for this exact purpose. It stores a mapping and allows any type=
 of keys.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-dd6KsGgAGP" href=3D"https://eloquentjavascript.net/06_=
object.html#c-dd6KsGgAGP" tabindex=3D"-1" role=3D"presentation"></a><span c=
lass=3D"tok-keyword">let</span> <span class=3D"tok-definition">ages</span> =
=3D <span class=3D"tok-keyword">new</span> Map();
ages.set(<span class=3D"tok-string">"Boris"</span>, <span class=3D"tok-numb=
er">39</span>);
ages.set(<span class=3D"tok-string">"Liang"</span>, <span class=3D"tok-numb=
er">22</span>);
ages.set(<span class=3D"tok-string">"J=C3=BAlia"</span>, <span class=3D"tok=
-number">62</span>);

console.log(<span class=3D"tok-string2">`J=C3=BAlia is </span>${ages.get(<s=
pan class=3D"tok-string">"J=C3=BAlia"</span>)}<span class=3D"tok-string2">`=
</span>);
<span class=3D"tok-comment">// =E2=86=92 J=C3=BAlia is 62</span>
console.log(<span class=3D"tok-string">"Is Jack's age known?"</span>, ages.=
has(<span class=3D"tok-string">"Jack"</span>));
<span class=3D"tok-comment">// =E2=86=92 Is Jack's age known? false</span>
console.log(ages.has(<span class=3D"tok-string">"toString"</span>));
<span class=3D"tok-comment">// =E2=86=92 false</span></pre>

<p><a class=3D"p_ident" id=3D"p-iIdp+mGl3Y" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-iIdp+mGl3Y" tabindex=3D"-1" role=3D"presentation">=
</a>The methods <code>set</code>, <code>get</code>, and <code>has</code> ar=
e part of the interface of the <code>Map</code> object. Writing a data stru=
cture that can quickly update and search a large set of values isn=E2=80=99=
t easy, but we don=E2=80=99t have to worry about that. Someone else did it =
for us, and we can go through this simple interface to use their work.</p>

<p><a class=3D"p_ident" id=3D"p-tx3xnowcEp" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-tx3xnowcEp" tabindex=3D"-1" role=3D"presentation">=
</a>If you do have a plain object that you need to treat as a map for some =
reason, it is useful to know that <code>Object.keys</code> returns only an =
object=E2=80=99s <em>own</em> keys, not those in the prototype. As an alter=
native to the <code>in</code> operator, you can use the <code>Object.hasOwn=
</code> function, which ignores the object=E2=80=99s prototype.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-KF6ERT9sZf" href=3D"https://eloquentjavascript.net/06_=
object.html#c-KF6ERT9sZf" tabindex=3D"-1" role=3D"presentation"></a>console=
.log(Object.hasOwn({<span class=3D"tok-definition">x</span>: <span class=3D=
"tok-number">1</span>}, <span class=3D"tok-string">"x"</span>));
<span class=3D"tok-comment">// =E2=86=92 true</span>
console.log(Object.hasOwn({<span class=3D"tok-definition">x</span>: <span c=
lass=3D"tok-number">1</span>}, <span class=3D"tok-string">"toString"</span>=
));
<span class=3D"tok-comment">// =E2=86=92 false</span></pre>

<h2><a class=3D"h_ident" id=3D"h-mJ/JHQRHg9" href=3D"https://eloquentjavasc=
ript.net/06_object.html#h-mJ/JHQRHg9" tabindex=3D"-1" role=3D"presentation"=
></a>Polymorphism</h2>

<p><a class=3D"p_ident" id=3D"p-ozkqUookhO" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-ozkqUookhO" tabindex=3D"-1" role=3D"presentation">=
</a>When you call the <code>String</code> function (which converts a value =
to a string) on an object, it will call the <code>toString</code> method on=
 that object to try to create a meaningful string from it. I mentioned that=
 some of the standard prototypes define their own version of <code>toString=
</code> so they can create a string that contains more useful information t=
han <code>"[object Object]"</code>. You can also do that yourself.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-DFhau0z7K/" href=3D"https://eloquentjavascript.net/06_=
object.html#c-DFhau0z7K/" tabindex=3D"-1" role=3D"presentation"></a>Rabbit.=
prototype.toString =3D <span class=3D"tok-keyword">function</span>() {
  <span class=3D"tok-keyword">return</span> <span class=3D"tok-string2">`a =
</span>${<span class=3D"tok-keyword">this</span>.type}<span class=3D"tok-st=
ring2"> rabbit`</span>;
};

console.log(String(killerRabbit));
<span class=3D"tok-comment">// =E2=86=92 a killer rabbit</span></pre>

<p><a class=3D"p_ident" id=3D"p-2VOQNtgVXK" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-2VOQNtgVXK" tabindex=3D"-1" role=3D"presentation">=
</a>This is a simple instance of a powerful idea. When a piece of code is w=
ritten to work with objects that have a certain interface=E2=80=94in this c=
ase, a <code>toString</code> method=E2=80=94any kind of object that happens=
 to support this interface can be plugged into the code and will be able to=
 work with it.</p>

<p><a class=3D"p_ident" id=3D"p-phZ92zNL98" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-phZ92zNL98" tabindex=3D"-1" role=3D"presentation">=
</a>This technique is called <em>polymorphism</em>. Polymorphic code can wo=
rk with values of different shapes, as long as they support the interface i=
t expects.</p>

<p><a class=3D"p_ident" id=3D"p-Z+DL+qqxIV" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-Z+DL+qqxIV" tabindex=3D"-1" role=3D"presentation">=
</a>An example of a widely used interface is that of array-like objects whi=
ch have a <code>length</code> property holding a number and numbered proper=
ties for each of their elements. Both arrays and strings support this inter=
face, as do various other objects, some of which we=E2=80=99ll see later in=
 the chapters about the browser. Our implementation of <code>forEach</code>=
 from <a href=3D"https://eloquentjavascript.net/05_higher_order.html">Chapt=
er 5</a> works on anything that provides this interface. In fact, so does <=
code>Array.<wbr>prototype.<wbr>forEach</code>.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-8an+KU+XJV" href=3D"https://eloquentjavascript.net/06_=
object.html#c-8an+KU+XJV" tabindex=3D"-1" role=3D"presentation"></a>Array.p=
rototype.forEach.call({
  <span class=3D"tok-definition">length</span>: <span class=3D"tok-number">=
2</span>,
  <span class=3D"tok-number">0</span>: <span class=3D"tok-string">"A"</span=
>,
  <span class=3D"tok-number">1</span>: <span class=3D"tok-string">"B"</span=
>
}, <span class=3D"tok-definition">elt</span> =3D&gt; console.log(elt));
<span class=3D"tok-comment">// =E2=86=92 A</span>
<span class=3D"tok-comment">// =E2=86=92 B</span></pre>

<h2><a class=3D"h_ident" id=3D"h-3vwredi8nD" href=3D"https://eloquentjavasc=
ript.net/06_object.html#h-3vwredi8nD" tabindex=3D"-1" role=3D"presentation"=
></a>Getters, setters, and statics</h2>

<p><a class=3D"p_ident" id=3D"p-0aNGN4nEbh" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-0aNGN4nEbh" tabindex=3D"-1" role=3D"presentation">=
</a>Interfaces often contain plain properties, not just methods. For exampl=
e, <code>Map</code> objects have a <code>size</code> property that tells yo=
u how many keys are stored in them.</p>

<p><a class=3D"p_ident" id=3D"p-SdyGtj5JbS" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-SdyGtj5JbS" tabindex=3D"-1" role=3D"presentation">=
</a>It is not necessary for such an object to compute and store such a prop=
erty directly in the instance. Even properties that are accessed directly m=
ay hide a method call. Such methods are called <em>getters</em> and are def=
ined by writing <code>get</code> in front of the method name in an object e=
xpression or class declaration.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-Np05mJ4GVO" href=3D"https://eloquentjavascript.net/06_=
object.html#c-Np05mJ4GVO" tabindex=3D"-1" role=3D"presentation"></a><span c=
lass=3D"tok-keyword">let</span> <span class=3D"tok-definition">varyingSize<=
/span> =3D {
  <span class=3D"tok-keyword">get</span> <span class=3D"tok-definition">siz=
e</span>() {
    <span class=3D"tok-keyword">return</span> Math.floor(Math.random() * <s=
pan class=3D"tok-number">100</span>);
  }
};

console.log(varyingSize.size);
<span class=3D"tok-comment">// =E2=86=92 73</span>
console.log(varyingSize.size);
<span class=3D"tok-comment">// =E2=86=92 49</span></pre>

<p><a class=3D"p_ident" id=3D"p-QwpqNIZOsS" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-QwpqNIZOsS" tabindex=3D"-1" role=3D"presentation">=
</a>Whenever someone reads from this object=E2=80=99s <code>size</code> pro=
perty, the associated method is called. You can do a similar thing when a p=
roperty is written to, using a <em>setter</em>.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-7LQG88c1BA" href=3D"https://eloquentjavascript.net/06_=
object.html#c-7LQG88c1BA" tabindex=3D"-1" role=3D"presentation"></a><span c=
lass=3D"tok-keyword">class</span> Temperature {
  <span class=3D"tok-definition">constructor</span>(<span class=3D"tok-defi=
nition">celsius</span>) {
    <span class=3D"tok-keyword">this</span>.celsius =3D celsius;
  }
  <span class=3D"tok-keyword">get</span> <span class=3D"tok-definition">fah=
renheit</span>() {
    <span class=3D"tok-keyword">return</span> <span class=3D"tok-keyword">t=
his</span>.celsius * <span class=3D"tok-number">1.8</span> + <span class=3D=
"tok-number">32</span>;
  }
  <span class=3D"tok-keyword">set</span> <span class=3D"tok-definition">fah=
renheit</span>(<span class=3D"tok-definition">value</span>) {
    <span class=3D"tok-keyword">this</span>.celsius =3D (value - <span clas=
s=3D"tok-number">32</span>) / <span class=3D"tok-number">1.8</span>;
  }

  <span class=3D"tok-keyword">static</span> <span class=3D"tok-definition">=
fromFahrenheit</span>(<span class=3D"tok-definition">value</span>) {
    <span class=3D"tok-keyword">return</span> <span class=3D"tok-keyword">n=
ew</span> Temperature((value - <span class=3D"tok-number">32</span>) / <spa=
n class=3D"tok-number">1.8</span>);
  }
}

<span class=3D"tok-keyword">let</span> <span class=3D"tok-definition">temp<=
/span> =3D <span class=3D"tok-keyword">new</span> Temperature(<span class=
=3D"tok-number">22</span>);
console.log(temp.fahrenheit);
<span class=3D"tok-comment">// =E2=86=92 71.6</span>
temp.fahrenheit =3D <span class=3D"tok-number">86</span>;
console.log(temp.celsius);
<span class=3D"tok-comment">// =E2=86=92 30</span></pre>

<p><a class=3D"p_ident" id=3D"p-Hf3p+suFR+" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-Hf3p+suFR+" tabindex=3D"-1" role=3D"presentation">=
</a>The <code>Temperature</code> class allows you to read and write the tem=
perature in either degrees Celsius or degrees Fahrenheit, but internally it=
 stores only Celsius and automatically converts to and from Celsius in the =
<code>fahrenheit</code> getter and setter.</p>

<p><a class=3D"p_ident" id=3D"p-MwIs1kR0mD" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-MwIs1kR0mD" tabindex=3D"-1" role=3D"presentation">=
</a>Sometimes you want to attach some properties directly to your construct=
or function rather than to the prototype. Such methods won=E2=80=99t have a=
ccess to a class instance but can, for example, be used to provide addition=
al ways to create instances.</p>

<p><a class=3D"p_ident" id=3D"p-zLJ2u9mlXs" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-zLJ2u9mlXs" tabindex=3D"-1" role=3D"presentation">=
</a>Inside a class declaration, methods or properties that have <code>stati=
c</code> written before their name are stored on the constructor. For examp=
le, the <code>Temperature</code> class allows you to write <code>Temperatur=
e.<wbr>fromFahrenheit(100)</code> to create a temperature using degrees Fah=
renheit:</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-hoPF4gIATO" href=3D"https://eloquentjavascript.net/06_=
object.html#c-hoPF4gIATO" tabindex=3D"-1" role=3D"presentation"></a><span c=
lass=3D"tok-keyword">let</span> <span class=3D"tok-definition">boil</span> =
=3D Temperature.fromFahrenheit(<span class=3D"tok-number">212</span>);
console.log(boil.celsius);
<span class=3D"tok-comment">// =E2=86=92 100</span></pre>

<h2><a class=3D"h_ident" id=3D"h-Iq1mTp65i3" href=3D"https://eloquentjavasc=
ript.net/06_object.html#h-Iq1mTp65i3" tabindex=3D"-1" role=3D"presentation"=
></a>Symbols</h2>

<p><a class=3D"p_ident" id=3D"p-Ydrs4O9rtA" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-Ydrs4O9rtA" tabindex=3D"-1" role=3D"presentation">=
</a>I mentioned in <a href=3D"https://eloquentjavascript.net/04_data.html#f=
or_of_loop">Chapter 4</a> that a <code>for</code>/<code>of</code> loop can =
loop over several kinds of data structures. This is another case of polymor=
phism=E2=80=94such loops expect the data structure to expose a specific int=
erface, which arrays and strings do. And we can also add this interface to =
our own objects! But before we can do that, we need to briefly take a look =
at the symbol type.</p>

<p><a class=3D"p_ident" id=3D"p-1ABqhLFM+9" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-1ABqhLFM+9" tabindex=3D"-1" role=3D"presentation">=
</a>It is possible for multiple interfaces to use the same property name fo=
r different things. For example, on array-like objects, <code>length</code>=
 refers to the number of elements in the collection. But an object interfac=
e describing a hiking route could use <code>length</code> to provide the le=
ngth of the route in meters. It would not be possible for an object to conf=
orm to both these interfaces.</p>

<p><a class=3D"p_ident" id=3D"p-0YTuRI/cjH" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-0YTuRI/cjH" tabindex=3D"-1" role=3D"presentation">=
</a>An object trying to be a route and array-like (maybe to enumerate its w=
aypoints) is somewhat far-fetched, and this kind of problem isn=E2=80=99t t=
hat common in practice. For things like the iteration protocol, though, the=
 language designers needed a type of property that <em>really</em> doesn=E2=
=80=99t conflict with any others. So in 2015, <em>symbols</em> were added t=
o the language.</p>

<p><a class=3D"p_ident" id=3D"p-7u3zfC6CYV" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-7u3zfC6CYV" tabindex=3D"-1" role=3D"presentation">=
</a>Most properties, including all those we have seen so far, are named wit=
h strings. But it is also possible to use symbols as property names. Symbol=
s are values created with the <code>Symbol</code> function. Unlike strings,=
 newly created symbols are unique=E2=80=94you cannot create the same symbol=
 twice.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-z1x4NrbIJu" href=3D"https://eloquentjavascript.net/06_=
object.html#c-z1x4NrbIJu" tabindex=3D"-1" role=3D"presentation"></a><span c=
lass=3D"tok-keyword">let</span> <span class=3D"tok-definition">sym</span> =
=3D Symbol(<span class=3D"tok-string">"name"</span>);
console.log(sym =3D=3D Symbol(<span class=3D"tok-string">"name"</span>));
<span class=3D"tok-comment">// =E2=86=92 false</span>
Rabbit.prototype[sym] =3D <span class=3D"tok-number">55</span>;
console.log(killerRabbit[sym]);
<span class=3D"tok-comment">// =E2=86=92 55</span></pre>

<p><a class=3D"p_ident" id=3D"p-PBxnKMHKqV" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-PBxnKMHKqV" tabindex=3D"-1" role=3D"presentation">=
</a>The string you pass to <code>Symbol</code> is included when you convert=
 it to a string and can make it easier to recognize a symbol when, for exam=
ple, showing it in the console. But it has no meaning beyond that=E2=80=94m=
ultiple symbols may have the same name.</p>

<p><a class=3D"p_ident" id=3D"p-n90pM44NAN" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-n90pM44NAN" tabindex=3D"-1" role=3D"presentation">=
</a>Being both unique and usable as property names makes symbols suitable f=
or defining interfaces that can peacefully live alongside other properties,=
 no matter what their names are.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-647+NgW7T5" href=3D"https://eloquentjavascript.net/06_=
object.html#c-647+NgW7T5" tabindex=3D"-1" role=3D"presentation"></a><span c=
lass=3D"tok-keyword">const</span> <span class=3D"tok-definition">length</sp=
an> =3D Symbol(<span class=3D"tok-string">"length"</span>);
Array.prototype[length] =3D <span class=3D"tok-number">0</span>;

console.log([<span class=3D"tok-number">1</span>, <span class=3D"tok-number=
">2</span>].length);
<span class=3D"tok-comment">// =E2=86=92 2</span>
console.log([<span class=3D"tok-number">1</span>, <span class=3D"tok-number=
">2</span>][length]);
<span class=3D"tok-comment">// =E2=86=92 0</span></pre>

<p><a class=3D"p_ident" id=3D"p-BaMC3Q+KCx" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-BaMC3Q+KCx" tabindex=3D"-1" role=3D"presentation">=
</a>It is possible to include symbol properties in object expressions and c=
lasses by using square brackets around the property name. That causes the e=
xpression between the brackets to be evaluated to produce the property name=
, analogous to the square bracket property access notation.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-Ajzpyt+E+3" href=3D"https://eloquentjavascript.net/06_=
object.html#c-Ajzpyt+E+3" tabindex=3D"-1" role=3D"presentation"></a><span c=
lass=3D"tok-keyword">let</span> <span class=3D"tok-definition">myTrip</span=
> =3D {
  <span class=3D"tok-definition">length</span>: <span class=3D"tok-number">=
2</span>,
  <span class=3D"tok-number">0</span>: <span class=3D"tok-string">"Lankwitz=
"</span>,
  <span class=3D"tok-number">1</span>: <span class=3D"tok-string">"Babelsbe=
rg"</span>,
  [length]: <span class=3D"tok-number">21500</span>
};
console.log(myTrip[length], myTrip.length);
<span class=3D"tok-comment">// =E2=86=92 21500 2</span></pre>

<h2><a class=3D"h_ident" id=3D"h-z2tOOXM8qO" href=3D"https://eloquentjavasc=
ript.net/06_object.html#h-z2tOOXM8qO" tabindex=3D"-1" role=3D"presentation"=
></a>The iterator interface</h2>

<p><a class=3D"p_ident" id=3D"p-MuKK1lR2TY" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-MuKK1lR2TY" tabindex=3D"-1" role=3D"presentation">=
</a>The object given to a <code>for</code>/<code>of</code> loop is expected=
 to be <em>iterable</em>. This means it has a method named with the <code>S=
ymbol.iterator</code> symbol (a symbol value defined by the language, store=
d as a property of the <code>Symbol</code> function).</p>

<p><a class=3D"p_ident" id=3D"p-gs0GMX9PA7" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-gs0GMX9PA7" tabindex=3D"-1" role=3D"presentation">=
</a>When called, that method should return an object that provides a second=
 interface, <em>iterator</em>. This is the actual thing that iterates. It h=
as a <code>next</code> method that returns the next result. That result sho=
uld be an object with a <code>value</code> property that provides the next =
value, if there is one, and a <code>done</code> property, which should be t=
rue when there are no more results and false otherwise.</p>

<p><a class=3D"p_ident" id=3D"p-a9jQxjOo3t" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-a9jQxjOo3t" tabindex=3D"-1" role=3D"presentation">=
</a>Note that the <code>next</code>, <code>value</code>, and <code>done</co=
de> property names are plain strings, not symbols. Only <code>Symbol.iterat=
or</code>, which is likely to be added to a <em>lot</em> of different objec=
ts, is an actual symbol.</p>

<p><a class=3D"p_ident" id=3D"p-wSWGcm7dId" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-wSWGcm7dId" tabindex=3D"-1" role=3D"presentation">=
</a>We can directly use this interface ourselves.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-CKTaBW3WjJ" href=3D"https://eloquentjavascript.net/06_=
object.html#c-CKTaBW3WjJ" tabindex=3D"-1" role=3D"presentation"></a><span c=
lass=3D"tok-keyword">let</span> <span class=3D"tok-definition">okIterator</=
span> =3D <span class=3D"tok-string">"OK"</span>[Symbol.iterator]();
console.log(okIterator.next());
<span class=3D"tok-comment">// =E2=86=92 {value: "O", done: false}</span>
console.log(okIterator.next());
<span class=3D"tok-comment">// =E2=86=92 {value: "K", done: false}</span>
console.log(okIterator.next());
<span class=3D"tok-comment">// =E2=86=92 {value: undefined, done: true}</sp=
an></pre>

<p><a class=3D"p_ident" id=3D"p-W3uMNuwlXY" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-W3uMNuwlXY" tabindex=3D"-1" role=3D"presentation">=
</a>Let=E2=80=99s implement an iterable data structure similar to the linke=
d list from the exercise in <a href=3D"https://eloquentjavascript.net/04_da=
ta.html">Chapter 4</a>. We=E2=80=99ll write the list as a class this time.<=
/p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-gbtYx+2BOB" href=3D"https://eloquentjavascript.net/06_=
object.html#c-gbtYx+2BOB" tabindex=3D"-1" role=3D"presentation"></a><span c=
lass=3D"tok-keyword">class</span> List {
  <span class=3D"tok-definition">constructor</span>(<span class=3D"tok-defi=
nition">value</span>, <span class=3D"tok-definition">rest</span>) {
    <span class=3D"tok-keyword">this</span>.value =3D value;
    <span class=3D"tok-keyword">this</span>.rest =3D rest;
  }

  <span class=3D"tok-keyword">get</span> <span class=3D"tok-definition">len=
gth</span>() {
    <span class=3D"tok-keyword">return</span> <span class=3D"tok-number">1<=
/span> + (<span class=3D"tok-keyword">this</span>.rest ? <span class=3D"tok=
-keyword">this</span>.rest.length : <span class=3D"tok-number">0</span>);
  }

  <span class=3D"tok-keyword">static</span> <span class=3D"tok-definition">=
fromArray</span>(<span class=3D"tok-definition">array</span>) {
    <span class=3D"tok-keyword">let</span> <span class=3D"tok-definition">r=
esult</span> =3D <span class=3D"tok-keyword">null</span>;
    <span class=3D"tok-keyword">for</span> (<span class=3D"tok-keyword">let=
</span> <span class=3D"tok-definition">i</span> =3D array.length - <span cl=
ass=3D"tok-number">1</span>; i &gt;=3D <span class=3D"tok-number">0</span>;=
 i--) {
      result =3D <span class=3D"tok-keyword">new</span> <span class=3D"tok-=
keyword">this</span>(array[i], result);
    }
    <span class=3D"tok-keyword">return</span> result;
  }
}</pre>

<p><a class=3D"p_ident" id=3D"p-BUyEDXn/QN" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-BUyEDXn/QN" tabindex=3D"-1" role=3D"presentation">=
</a>Note that <code>this</code>, in a static method, points at the construc=
tor of the class, not an instance=E2=80=94there is no instance around when =
a static method is called.</p>

<p><a class=3D"p_ident" id=3D"p-mVl963he9a" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-mVl963he9a" tabindex=3D"-1" role=3D"presentation">=
</a>Iterating over a list should return all the list=E2=80=99s elements fro=
m start to end. We=E2=80=99ll write a separate class for the iterator.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-DdCDPJPgdV" href=3D"https://eloquentjavascript.net/06_=
object.html#c-DdCDPJPgdV" tabindex=3D"-1" role=3D"presentation"></a><span c=
lass=3D"tok-keyword">class</span> ListIterator {
  <span class=3D"tok-definition">constructor</span>(<span class=3D"tok-defi=
nition">list</span>) {
    <span class=3D"tok-keyword">this</span>.list =3D list;
  }

  <span class=3D"tok-definition">next</span>() {
    <span class=3D"tok-keyword">if</span> (<span class=3D"tok-keyword">this=
</span>.list =3D=3D <span class=3D"tok-keyword">null</span>) {
      <span class=3D"tok-keyword">return</span> {<span class=3D"tok-definit=
ion">done</span>: true};
    }
    <span class=3D"tok-keyword">let</span> <span class=3D"tok-definition">v=
alue</span> =3D <span class=3D"tok-keyword">this</span>.list.value;
    <span class=3D"tok-keyword">this</span>.list =3D <span class=3D"tok-key=
word">this</span>.list.rest;
    <span class=3D"tok-keyword">return</span> {<span class=3D"tok-definitio=
n">value</span>, <span class=3D"tok-definition">done</span>: false};
  }
}</pre>

<p><a class=3D"p_ident" id=3D"p-N8qXdZBlps" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-N8qXdZBlps" tabindex=3D"-1" role=3D"presentation">=
</a>The class tracks the progress of iterating through the list by updating=
 its <code>list</code> property to move to the next list object whenever a =
value is returned and reports that it is done when that list is empty (null=
).</p>

<p><a class=3D"p_ident" id=3D"p-Iu3bFayPkp" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-Iu3bFayPkp" tabindex=3D"-1" role=3D"presentation">=
</a>Let=E2=80=99s set up the <code>List</code> class to be iterable. Throug=
hout this book, I=E2=80=99ll occasionally use after-the-fact prototype mani=
pulation to add methods to classes so that the individual pieces of code re=
main small and self-contained. In a regular program, where there is no need=
 to split the code into small pieces, you=E2=80=99d declare these methods d=
irectly in the class instead.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-o1rzfIRpoY" href=3D"https://eloquentjavascript.net/06_=
object.html#c-o1rzfIRpoY" tabindex=3D"-1" role=3D"presentation"></a>List.pr=
ototype[Symbol.iterator] =3D <span class=3D"tok-keyword">function</span>() =
{
  <span class=3D"tok-keyword">return</span> <span class=3D"tok-keyword">new=
</span> ListIterator(<span class=3D"tok-keyword">this</span>);
};</pre>

<p><a class=3D"p_ident" id=3D"p-E7+RwcKNya" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-E7+RwcKNya" tabindex=3D"-1" role=3D"presentation">=
</a>We can now loop over a list with <code>for</code>/<code>of</code>.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-mtRaGo5zew" href=3D"https://eloquentjavascript.net/06_=
object.html#c-mtRaGo5zew" tabindex=3D"-1" role=3D"presentation"></a><span c=
lass=3D"tok-keyword">let</span> <span class=3D"tok-definition">list</span> =
=3D List.fromArray([<span class=3D"tok-number">1</span>, <span class=3D"tok=
-number">2</span>, <span class=3D"tok-number">3</span>]);
<span class=3D"tok-keyword">for</span> (<span class=3D"tok-keyword">let</sp=
an> <span class=3D"tok-definition">element</span> <span class=3D"tok-keywor=
d">of</span> list) {
  console.log(element);
}
<span class=3D"tok-comment">// =E2=86=92 1</span>
<span class=3D"tok-comment">// =E2=86=92 2</span>
<span class=3D"tok-comment">// =E2=86=92 3</span></pre>

<p><a class=3D"p_ident" id=3D"p-1/0HTvmJYu" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-1/0HTvmJYu" tabindex=3D"-1" role=3D"presentation">=
</a>The <code>...</code> syntax in array notation and function calls simila=
rly works with any iterable object. For example, you can use <code>[...valu=
e]</code> to create an array containing the elements in an arbitrary iterab=
le object.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-h/UOuG536h" href=3D"https://eloquentjavascript.net/06_=
object.html#c-h/UOuG536h" tabindex=3D"-1" role=3D"presentation"></a>console=
.log([...<span class=3D"tok-string">"PCI"</span>]);
<span class=3D"tok-comment">// =E2=86=92 ["P", "C", "I"]</span></pre>

<h2><a class=3D"h_ident" id=3D"h-/a3bnONnws" href=3D"https://eloquentjavasc=
ript.net/06_object.html#h-/a3bnONnws" tabindex=3D"-1" role=3D"presentation"=
></a>Inheritance</h2>

<p><a class=3D"p_ident" id=3D"p-s4f4wqT5wi" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-s4f4wqT5wi" tabindex=3D"-1" role=3D"presentation">=
</a>Imagine we need a list type much like the <code>List</code> class we sa=
w before, but because we will be asking for its length all the time, we don=
=E2=80=99t want it to have to scan through its <code>rest</code> every time=
. Instead, we want to store the length in every instance for efficient acce=
ss.</p>

<p><a class=3D"p_ident" id=3D"p-iJREewMgVn" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-iJREewMgVn" tabindex=3D"-1" role=3D"presentation">=
</a>JavaScript=E2=80=99s prototype system makes it possible to create a <em=
>new</em> class, much like the old class, but with new definitions for some=
 of its properties. The prototype for the new class derives from the old pr=
ototype but adds a new definition for, say, the <code>length</code> getter.=
</p>

<p><a class=3D"p_ident" id=3D"p-yxSbbf8oT4" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-yxSbbf8oT4" tabindex=3D"-1" role=3D"presentation">=
</a>In object-oriented programming terms, this is called <em>inheritance</e=
m>. The new class inherits properties and behavior from the old class.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-bM/xGe1d1z" href=3D"https://eloquentjavascript.net/06_=
object.html#c-bM/xGe1d1z" tabindex=3D"-1" role=3D"presentation"></a><span c=
lass=3D"tok-keyword">class</span> LengthList <span class=3D"tok-keyword">ex=
tends</span> List {
  <span class=3D"tok-definition">#length</span>;

  <span class=3D"tok-definition">constructor</span>(<span class=3D"tok-defi=
nition">value</span>, <span class=3D"tok-definition">rest</span>) {
    <span class=3D"tok-atom">super</span>(value, rest);
    <span class=3D"tok-keyword">this</span>.#length =3D <span class=3D"tok-=
atom">super</span>.length;
  }

  <span class=3D"tok-keyword">get</span> <span class=3D"tok-definition">len=
gth</span>() {
    <span class=3D"tok-keyword">return</span> <span class=3D"tok-keyword">t=
his</span>.#length;
  }
}

console.log(LengthList.fromArray([<span class=3D"tok-number">1</span>, <spa=
n class=3D"tok-number">2</span>, <span class=3D"tok-number">3</span>]).leng=
th);
<span class=3D"tok-comment">// =E2=86=92 3</span></pre>

<p><a class=3D"p_ident" id=3D"p-EbjAUADbj8" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-EbjAUADbj8" tabindex=3D"-1" role=3D"presentation">=
</a>The use of the word <code>extends</code> indicates that this class shou=
ldn=E2=80=99t be directly based on the default <code>Object</code> prototyp=
e but on some other class. This is called the <em>superclass</em>. The deri=
ved class is the <em>subclass</em>.</p>

<p><a class=3D"p_ident" id=3D"p-nuE67XuPmk" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-nuE67XuPmk" tabindex=3D"-1" role=3D"presentation">=
</a>To initialize a <code>LengthList</code> instance, the constructor calls=
 the constructor of its superclass through the <code>super</code> keyword. =
This is necessary because if this new object is to behave (roughly) like a =
<code>List</code>, it is going to need the instance properties that lists h=
ave.</p>

<p><a class=3D"p_ident" id=3D"p-RmJyDDSWTz" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-RmJyDDSWTz" tabindex=3D"-1" role=3D"presentation">=
</a>The constructor then stores the list=E2=80=99s length in a private prop=
erty. If we had written <code>this.length</code> there, the class=E2=80=99s=
 own getter would have been called, which doesn=E2=80=99t work yet since <c=
ode>#length</code> hasn=E2=80=99t been filled in yet. We can use <code>supe=
r.something</code> to call methods and getters on the superclass=E2=80=99s =
prototype, which is often useful.</p>

<p><a class=3D"p_ident" id=3D"p-apvJjMYcsg" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-apvJjMYcsg" tabindex=3D"-1" role=3D"presentation">=
</a>Inheritance allows us to build slightly different data types from exist=
ing data types with relatively little work. It is a fundamental part of the=
 object-oriented tradition, alongside encapsulation and polymorphism. But w=
hile the latter two are now generally regarded as wonderful ideas, inherita=
nce is more controversial.</p>

<p><a class=3D"p_ident" id=3D"p-CWDhzksvzb" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-CWDhzksvzb" tabindex=3D"-1" role=3D"presentation">=
</a>Whereas encapsulation and polymorphism can be used to <em>separate</em>=
 pieces of code from one another, reducing the tangledness of the overall p=
rogram, inheritance fundamentally ties classes together, creating <em>more<=
/em> tangle. When inheriting from a class, you usually have to know more ab=
out how it works than when simply using it. Inheritance can be a useful too=
l to make some types of programs more succinct, but it shouldn=E2=80=99t be=
 the first tool you reach for, and you probably shouldn=E2=80=99t actively =
go looking for opportunities to construct class hierarchies (family trees o=
f classes).</p>

<h2><a class=3D"h_ident" id=3D"h-Fdk67dJHwg" href=3D"https://eloquentjavasc=
ript.net/06_object.html#h-Fdk67dJHwg" tabindex=3D"-1" role=3D"presentation"=
></a>The instanceof operator</h2>

<p><a class=3D"p_ident" id=3D"p-wnmK5D9foe" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-wnmK5D9foe" tabindex=3D"-1" role=3D"presentation">=
</a>It is occasionally useful to know whether an object was derived from a =
specific class. For this, JavaScript provides a binary operator called <cod=
e>instanceof</code>.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-wtZ2QK2G5a" href=3D"https://eloquentjavascript.net/06_=
object.html#c-wtZ2QK2G5a" tabindex=3D"-1" role=3D"presentation"></a>console=
.log(
  <span class=3D"tok-keyword">new</span> LengthList(<span class=3D"tok-numb=
er">1</span>, <span class=3D"tok-keyword">null</span>) <span class=3D"tok-k=
eyword">instanceof</span> LengthList);
<span class=3D"tok-comment">// =E2=86=92 true</span>
console.log(<span class=3D"tok-keyword">new</span> LengthList(<span class=
=3D"tok-number">2</span>, <span class=3D"tok-keyword">null</span>) <span cl=
ass=3D"tok-keyword">instanceof</span> List);
<span class=3D"tok-comment">// =E2=86=92 true</span>
console.log(<span class=3D"tok-keyword">new</span> List(<span class=3D"tok-=
number">3</span>, <span class=3D"tok-keyword">null</span>) <span class=3D"t=
ok-keyword">instanceof</span> LengthList);
<span class=3D"tok-comment">// =E2=86=92 false</span>
console.log([<span class=3D"tok-number">1</span>] <span class=3D"tok-keywor=
d">instanceof</span> Array);
<span class=3D"tok-comment">// =E2=86=92 true</span></pre>

<p><a class=3D"p_ident" id=3D"p-+hFJQaiLG6" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-+hFJQaiLG6" tabindex=3D"-1" role=3D"presentation">=
</a>The operator will see through inherited types, so a <code>LengthList</c=
ode> is an instance of <code>List</code>. The operator can also be applied =
to standard constructors like <code>Array</code>. Almost every object is an=
 instance of <code>Object</code>.</p>

<h2><a class=3D"h_ident" id=3D"h-ErccPg/l98" href=3D"https://eloquentjavasc=
ript.net/06_object.html#h-ErccPg/l98" tabindex=3D"-1" role=3D"presentation"=
></a>Summary</h2>

<p><a class=3D"p_ident" id=3D"p-ZoMazvCyv8" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-ZoMazvCyv8" tabindex=3D"-1" role=3D"presentation">=
</a>Objects do more than just hold their own properties. They have prototyp=
es, which are other objects. They=E2=80=99ll act as if they have properties=
 they don=E2=80=99t have as long as their prototype has that property. Simp=
le objects have <code>Object.prototype</code> as their prototype.</p>

<p><a class=3D"p_ident" id=3D"p-A+dQsxCVz8" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-A+dQsxCVz8" tabindex=3D"-1" role=3D"presentation">=
</a>Constructors, which are functions whose names usually start with a capi=
tal letter, can be used with the <code>new</code> operator to create new ob=
jects. The new object=E2=80=99s prototype will be the object found in the <=
code>prototype</code> property of the constructor. You can make good use of=
 this by putting the properties that all values of a given type share into =
their prototype. There=E2=80=99s a <code>class</code> notation that provide=
s a clear way to define a constructor and its prototype.</p>

<p><a class=3D"p_ident" id=3D"p-AFyYjRH+5G" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-AFyYjRH+5G" tabindex=3D"-1" role=3D"presentation">=
</a>You can define getters and setters to secretly call methods every time =
an object=E2=80=99s property is accessed. Static methods are methods stored=
 in a class=E2=80=99s constructor rather than its prototype.</p>

<p><a class=3D"p_ident" id=3D"p-U1iTgKNfyX" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-U1iTgKNfyX" tabindex=3D"-1" role=3D"presentation">=
</a>The <code>instanceof</code> operator can, given an object and a constru=
ctor, tell you whether that object is an instance of that constructor.</p>

<p><a class=3D"p_ident" id=3D"p-LOAETrspuz" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-LOAETrspuz" tabindex=3D"-1" role=3D"presentation">=
</a>One useful thing to do with objects is to specify an interface for them=
 and tell everybody that they are supposed to talk to your object only thro=
ugh that interface. The rest of the details that make up your object are no=
w <em>encapsulated</em>, hidden behind the interface. You can use private p=
roperties to hide a part of your object from the outside world.</p>

<p><a class=3D"p_ident" id=3D"p-nz8jafatnY" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-nz8jafatnY" tabindex=3D"-1" role=3D"presentation">=
</a>More than one type may implement the same interface. Code written to us=
e an interface automatically knows how to work with any number of different=
 objects that provide the interface. This is called <em>polymorphism</em>.<=
/p>

<p><a class=3D"p_ident" id=3D"p-fg/ZL+fqD3" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-fg/ZL+fqD3" tabindex=3D"-1" role=3D"presentation">=
</a>When implementing multiple classes that differ in only some details, it=
 can be helpful to write the new classes as <em>subclasses</em> of an exist=
ing class, <em>inheriting</em> part of its behavior.</p>

<h2><a class=3D"h_ident" id=3D"h-TcUD2vzyMe" href=3D"https://eloquentjavasc=
ript.net/06_object.html#h-TcUD2vzyMe" tabindex=3D"-1" role=3D"presentation"=
></a>Exercises</h2>

<h3 id=3D"exercise_vector"><a class=3D"i_ident" id=3D"i-zO8FRQBMAy" href=3D=
"https://eloquentjavascript.net/06_object.html#i-zO8FRQBMAy" tabindex=3D"-1=
" role=3D"presentation"></a>A vector type</h3>

<p><a class=3D"p_ident" id=3D"p-YtkHcQdZSH" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-YtkHcQdZSH" tabindex=3D"-1" role=3D"presentation">=
</a>Write a class <code>Vec</code> that represents a vector in two-dimensio=
nal space. It takes <code>x</code> and <code>y</code> parameters (numbers),=
 that it saves to properties of the same name.</p>

<p><a class=3D"p_ident" id=3D"p-7B3ixqpWia" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-7B3ixqpWia" tabindex=3D"-1" role=3D"presentation">=
</a>Give the <code>Vec</code> prototype two methods, <code>plus</code> and =
<code>minus</code>, that take another vector as a parameter and return a ne=
w vector that has the sum or difference of the two vectors=E2=80=99 (<code>=
this</code> and the parameter) <em>x</em> and <em>y</em> values.</p>

<p><a class=3D"p_ident" id=3D"p-F5nP+jpza3" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-F5nP+jpza3" tabindex=3D"-1" role=3D"presentation">=
</a>Add a getter property <code>length</code> to the prototype that compute=
s the length of the vector=E2=80=94that is, the distance of the point (<em>=
x</em>, <em>y</em>) from the origin (0, 0).</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-f3P62tUJWH" href=3D"https://eloquentjavascript.net/06_=
object.html#c-f3P62tUJWH" tabindex=3D"-1" role=3D"presentation"></a><span c=
lass=3D"tok-comment">// Your code here.</span>

console.log(<span class=3D"tok-keyword">new</span> Vec(<span class=3D"tok-n=
umber">1</span>, <span class=3D"tok-number">2</span>).plus(<span class=3D"t=
ok-keyword">new</span> Vec(<span class=3D"tok-number">2</span>, <span class=
=3D"tok-number">3</span>)));
<span class=3D"tok-comment">// =E2=86=92 Vec{x: 3, y: 5}</span>
console.log(<span class=3D"tok-keyword">new</span> Vec(<span class=3D"tok-n=
umber">1</span>, <span class=3D"tok-number">2</span>).minus(<span class=3D"=
tok-keyword">new</span> Vec(<span class=3D"tok-number">2</span>, <span clas=
s=3D"tok-number">3</span>)));
<span class=3D"tok-comment">// =E2=86=92 Vec{x: -1, y: -1}</span>
console.log(<span class=3D"tok-keyword">new</span> Vec(<span class=3D"tok-n=
umber">3</span>, <span class=3D"tok-number">4</span>).length);
<span class=3D"tok-comment">// =E2=86=92 5</span></pre>

<details class=3D"solution"><summary>Display hints...</summary><div class=
=3D"solution-text">

<p><a class=3D"p_ident" id=3D"p-jRIa414Yh5" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-jRIa414Yh5" tabindex=3D"-1" role=3D"presentation">=
</a>Look back to the <code>Rabbit</code> class example if you=E2=80=99re un=
sure how <code>class</code> declarations look.</p>

<p><a class=3D"p_ident" id=3D"p-2lTcnsjfvm" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-2lTcnsjfvm" tabindex=3D"-1" role=3D"presentation">=
</a>Adding a getter property to the constructor can be done by putting the =
word <code>get</code> before the method name. To compute the distance from =
(0, 0) to (x, y), you can use the Pythagorean theorem, which says that the =
square of the distance we are looking for is equal to the square of the x-c=
oordinate plus the square of the y-coordinate. Thus, =E2=88=9A(x<sup>2</sup=
> + y<sup>2</sup>) is the number you want. <code>Math.sqrt</code> is the wa=
y you compute a square root in JavaScript and <code>x ** 2</code> can be us=
ed to square a number.</p>

</div></details>

<h3><a class=3D"i_ident" id=3D"i-rpYp9Ou4LG" href=3D"https://eloquentjavasc=
ript.net/06_object.html#i-rpYp9Ou4LG" tabindex=3D"-1" role=3D"presentation"=
></a>Groups</h3>

<p id=3D"groups"><a class=3D"p_ident" id=3D"p-1TnXiDoyR2" href=3D"https://e=
loquentjavascript.net/06_object.html#p-1TnXiDoyR2" tabindex=3D"-1" role=3D"=
presentation"></a>The standard JavaScript environment provides another data=
 structure called <code>Set</code>. Like an instance of <code>Map</code>, a=
 set holds a collection of values. Unlike <code>Map</code>, it does not ass=
ociate other values with those=E2=80=94it just tracks which values are part=
 of the set. A value can be part of a set only once=E2=80=94adding it again=
 doesn=E2=80=99t have any effect.</p>

<p><a class=3D"p_ident" id=3D"p-IBo4QI1mvy" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-IBo4QI1mvy" tabindex=3D"-1" role=3D"presentation">=
</a>Write a class called <code>Group</code> (since <code>Set</code> is alre=
ady taken). Like <code>Set</code>, it has <code>add</code>, <code>delete</c=
ode>, and <code>has</code> methods. Its constructor creates an empty group,=
 <code>add</code> adds a value to the group (but only if it isn=E2=80=99t a=
lready a member), <code>delete</code> removes its argument from the group (=
if it was a member), and <code>has</code> returns a Boolean value indicatin=
g whether its argument is a member of the group.</p>

<p><a class=3D"p_ident" id=3D"p-cHm3PZ0L5i" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-cHm3PZ0L5i" tabindex=3D"-1" role=3D"presentation">=
</a>Use the <code>=3D=3D=3D</code> operator, or something equivalent such a=
s <code>indexOf</code>, to determine whether two values are the same.</p>

<p><a class=3D"p_ident" id=3D"p-CbJ60eqr+J" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-CbJ60eqr+J" tabindex=3D"-1" role=3D"presentation">=
</a>Give the class a static <code>from</code> method that takes an iterable=
 object as argument and creates a group that contains all the values produc=
ed by iterating over it.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-dNauaecKx+" href=3D"https://eloquentjavascript.net/06_=
object.html#c-dNauaecKx+" tabindex=3D"-1" role=3D"presentation"></a><span c=
lass=3D"tok-keyword">class</span> Group {
  <span class=3D"tok-comment">// Your code here.</span>
}

<span class=3D"tok-keyword">let</span> <span class=3D"tok-definition">group=
</span> =3D Group.from([<span class=3D"tok-number">10</span>, <span class=
=3D"tok-number">20</span>]);
console.log(group.has(<span class=3D"tok-number">10</span>));
<span class=3D"tok-comment">// =E2=86=92 true</span>
console.log(group.has(<span class=3D"tok-number">30</span>));
<span class=3D"tok-comment">// =E2=86=92 false</span>
group.add(<span class=3D"tok-number">10</span>);
group.delete(<span class=3D"tok-number">10</span>);
console.log(group.has(<span class=3D"tok-number">10</span>));
<span class=3D"tok-comment">// =E2=86=92 false</span></pre>

<details class=3D"solution"><summary>Display hints...</summary><div class=
=3D"solution-text">

<p><a class=3D"p_ident" id=3D"p-fQA7KS4poU" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-fQA7KS4poU" tabindex=3D"-1" role=3D"presentation">=
</a>The easiest way to do this is to store an array of group members in an =
instance property. The <code>includes</code> or <code>indexOf</code> method=
s can be used to check whether a given value is in the array.</p>

<p><a class=3D"p_ident" id=3D"p-2+V8dOgKHs" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-2+V8dOgKHs" tabindex=3D"-1" role=3D"presentation">=
</a>Your class=E2=80=99s constructor can set the member collection to an em=
pty array. When <code>add</code> is called, it must check whether the given=
 value is in the array or add it, for example with <code>push</code>, other=
wise.</p>

<p><a class=3D"p_ident" id=3D"p-GVg0o9XSa+" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-GVg0o9XSa+" tabindex=3D"-1" role=3D"presentation">=
</a>Deleting an element from an array, in <code>delete</code>, is less stra=
ightforward, but you can use <code>filter</code> to create a new array with=
out the value. Don=E2=80=99t forget to overwrite the property holding the m=
embers with the newly filtered version of the array.</p>

<p><a class=3D"p_ident" id=3D"p-uNRo2OReFq" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-uNRo2OReFq" tabindex=3D"-1" role=3D"presentation">=
</a>The <code>from</code> method can use a <code>for</code>/<code>of</code>=
 loop to get the values out of the iterable object and call <code>add</code=
> to put them into a newly created group.</p>

</div></details>

<h3><a class=3D"i_ident" id=3D"i-djD3XDJ27V" href=3D"https://eloquentjavasc=
ript.net/06_object.html#i-djD3XDJ27V" tabindex=3D"-1" role=3D"presentation"=
></a>Iterable groups</h3>

<p id=3D"group_iterator"><a class=3D"p_ident" id=3D"p-azaOoj0ezw" href=3D"h=
ttps://eloquentjavascript.net/06_object.html#p-azaOoj0ezw" tabindex=3D"-1" =
role=3D"presentation"></a>Make the <code>Group</code> class from the previo=
us exercise iterable. Refer  to the section about the iterator interface ea=
rlier in the chapter if you aren=E2=80=99t clear on the exact form of the i=
nterface anymore.</p>

<p><a class=3D"p_ident" id=3D"p-SoL9V7zUCt" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-SoL9V7zUCt" tabindex=3D"-1" role=3D"presentation">=
</a>If you used an array to represent the group=E2=80=99s members, don=E2=
=80=99t just return the iterator created by calling the <code>Symbol.iterat=
or</code> method on the array. That would work, but it defeats the purpose =
of this exercise.</p>

<p><a class=3D"p_ident" id=3D"p-h9xzbPAOXK" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-h9xzbPAOXK" tabindex=3D"-1" role=3D"presentation">=
</a>It is okay if your iterator behaves strangely when the group is modifie=
d during iteration.</p>

<pre tabindex=3D"0" class=3D"snippet" data-language=3D"javascript"><a class=
=3D"c_ident" id=3D"c-n6ZNn/zRLj" href=3D"https://eloquentjavascript.net/06_=
object.html#c-n6ZNn/zRLj" tabindex=3D"-1" role=3D"presentation"></a><span c=
lass=3D"tok-comment">// Your code here (and the code from the previous exer=
cise)</span>

<span class=3D"tok-keyword">for</span> (<span class=3D"tok-keyword">let</sp=
an> <span class=3D"tok-definition">value</span> <span class=3D"tok-keyword"=
>of</span> Group.from([<span class=3D"tok-string">"a"</span>, <span class=
=3D"tok-string">"b"</span>, <span class=3D"tok-string">"c"</span>])) {
  console.log(value);
}
<span class=3D"tok-comment">// =E2=86=92 a</span>
<span class=3D"tok-comment">// =E2=86=92 b</span>
<span class=3D"tok-comment">// =E2=86=92 c</span></pre>

<details class=3D"solution"><summary>Display hints...</summary><div class=
=3D"solution-text">

<p><a class=3D"p_ident" id=3D"p-URAzFlYuQP" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-URAzFlYuQP" tabindex=3D"-1" role=3D"presentation">=
</a>It is probably worthwhile to define a new class <code>GroupIterator</co=
de>. Iterator instances should have a property that tracks the current posi=
tion in the group. Every time <code>next</code> is called, it checks whethe=
r it is done and, if not, moves past the current value and returns it.</p>

<p><a class=3D"p_ident" id=3D"p-h7IDV/LpHi" href=3D"https://eloquentjavascr=
ipt.net/06_object.html#p-h7IDV/LpHi" tabindex=3D"-1" role=3D"presentation">=
</a>The <code>Group</code> class itself gets a method named by <code>Symbol=
.iterator</code> that, when called, returns a new instance of the iterator =
class for that group.</p>

</div></details><nav><a href=3D"https://eloquentjavascript.net/05_higher_or=
der.html" title=3D"previous chapter" aria-label=3D"previous chapter">=E2=97=
=82</a>&nbsp;<a href=3D"https://eloquentjavascript.net/index.html" title=3D=
"cover" aria-label=3D"cover">=E2=97=8F</a>&nbsp;<a href=3D"https://eloquent=
javascript.net/07_robot.html" title=3D"next chapter" aria-label=3D"next cha=
pter">=E2=96=B8</a>&nbsp;<button class=3D"help" title=3D"help" aria-label=
=3D"help" style=3D"display: inline;"><strong>?</strong></button>
</nav>
</article>


</body><div id=3D"simplifyJobsContainer" style=3D"position: absolute; top: =
0px; left: 0px; width: 0px; height: 0px; overflow: visible; z-index: 214748=
3647;"><span><template shadowmode=3D"open"><link rel=3D"stylesheet" href=3D=
"chrome-extension://pbanhockgagggenencehbnadejlgchfc/css/styles.css"><div i=
d=3D"simplifyJobsPortals"></div></template></span></div><grammarly-desktop-=
integration data-grammarly-shadow-root=3D"true"><template shadowmode=3D"ope=
n"><div aria-label=3D"grammarly-integration" role=3D"group" tabindex=3D"-1"=
 class=3D"grammarly-desktop-integration" data-content=3D"{&quot;mode&quot;:=
&quot;full&quot;,&quot;isActive&quot;:true,&quot;isUserDisabled&quot;:false=
}"></div></template></grammarly-desktop-integration></html>
------MultipartBoundary--tnlCDEymNh4kqPAHYgyDfFLtftrP4FXhODZa0L28jl----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-da45f11f-783f-410d-9db3-116f108f0107@mhtml.blink

@charset "utf-8";
=0A
------MultipartBoundary--tnlCDEymNh4kqPAHYgyDfFLtftrP4FXhODZa0L28jl----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-b7da941a-d24f-4965-bdee-95f59c3ff4c4@mhtml.blink

@charset "utf-8";
=0A
------MultipartBoundary--tnlCDEymNh4kqPAHYgyDfFLtftrP4FXhODZa0L28jl----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-e23df0c6-bacf-42e9-b34d-2dbf1a51ecf6@mhtml.blink

@charset "utf-8";
=0A
------MultipartBoundary--tnlCDEymNh4kqPAHYgyDfFLtftrP4FXhODZa0L28jl----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-814b7fc3-8444-4c63-bc5a-24057f6ff70b@mhtml.blink

@charset "utf-8";

@media print {
  #simplifyJobsContainer { display: none; }
}
------MultipartBoundary--tnlCDEymNh4kqPAHYgyDfFLtftrP4FXhODZa0L28jl----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://eloquentjavascript.net/css/ejs.css

@charset "utf-8";

@font-face { font-family: Cinzel; font-style: normal; font-weight: 700; src=
: local("Cinzel-Bold"), url("../font/cinzel_bold.woff") format("woff"); }

@font-face { font-family: "PT Mono"; font-style: normal; font-weight: 400; =
src: local("PT Mono"), local("PTMono-Regular"), url("../font/pt_mono.woff")=
 format("woff"); }

html, body { padding: 0px; margin: 0px; }

body { font-family: Georgia, "Nimbus Roman No9 L", "Century Schoolbook L", =
serif; font-size: 20px; line-height: 1.45; color: black; background: white;=
 }

article { margin: 0px auto; max-width: 35em; padding: 2em 1em 5em; position=
: relative; overflow-wrap: break-word; }

nav { display: block; height: 0px; text-align: right; }

nav a { font-size: 80%; color: rgb(170, 170, 170) !important; text-decorati=
on: none !important; }

nav button { background: transparent; color: rgb(170, 170, 170); border: no=
ne; cursor: pointer; }

nav button.help { display: none; }

div.popup { position: fixed; inset: 0px; border-radius: 3px; max-width: min=
(35rem, 90%); height: fit-content; box-sizing: content-box; margin: auto; b=
order: 1px solid rgb(68, 170, 187); padding: 0px 1.5em 1em; background: whi=
te; max-height: 90%; overflow: hidden auto; outline: rgba(255, 255, 255, 0.=
733) solid 1000px; }

div.popup kbd { font-weight: bold; font-family: "PT Mono", monospace; font-=
size: 18px; }

a.subtlelink { color: black !important; text-decoration: none !important; }

pre { padding: 5px 0px 5px 15px; line-height: 1.35; margin: 1rem 0px; max-w=
idth: 100%; overflow-x: auto; color: black; }

pre[data-language=3D"javascript"] { cursor: pointer; }

p:hover a.p_ident::after, pre:hover a.c_ident::after, h2:hover a.h_ident::a=
fter, h3:hover a.i_ident::after { content: "=C2=B6"; font-family: Cinzel, G=
eorgia, serif; color: rgb(136, 136, 136); font-size: 17px; position: absolu=
te; right: -10px; }

@media screen and (max-width: 800px) {
  p:hover a.p_ident::after, pre:hover a.c_ident::after, h2:hover a.h_ident:=
:after, h3:hover a.i_ident::after { right: 5px; }
  blockquote p:hover a.p_ident::after { right: -15px; }
}

code, pre, .cm-editor .cm-content, .cm-editor { font-size: 18px; font-famil=
y: "PT Mono", monospace; }

code { padding: 0px 2px; }

h1, h2, h3 { font-family: Cinzel, Georgia, serif; font-weight: 700; margin:=
 1rem 0px; letter-spacing: 2px; }

h1 { font-size: 130%; }

h2 { font-size: 115%; }

h3 { font-size: 100%; }

pre.snippet, p, h2, h3 { margin-right: -30px; padding-right: 30px; }

@media screen and (max-width: 800px) {
  pre.snippet, p, h2, h3 { margin-right: 0px; padding-right: 0px; }
}

a, a:visited, a:active { text-decoration: none; color: rgb(68, 102, 119); }

a:hover { text-decoration: underline; }

ol { margin: 1em 0px; padding: 0px; counter-reset: li 0; }

ol li { margin: 0px 0px 0px 40px; padding: 0px; list-style: none; position:=
 relative; }

ol li::before { content: counter(li) "."; counter-increment: li 1; position=
: absolute; width: 2em; text-align: right; left: -2.5em; top: 1px; font-siz=
e: 90%; }

ol li p { margin: 0px; }

.chap_num { font-size: 60%; color: rgb(170, 170, 170); margin-top: -0.7em; =
display: block; }

blockquote { margin: 0px 0px 0px 3em; padding: 0px; position: relative; fon=
t-size: 85%; }

blockquote p { color: rgb(51, 51, 51); }

blockquote::before { content: "=E2=80=9C"; position: absolute; left: -0.5em=
; }

blockquote p:last-of-type::after { content: "=E2=80=9D"; }

blockquote footer { position: relative; margin-left: 1em; }

p + footer { margin-top: -0.5em; }

blockquote footer cite { font-style: italic; }

blockquote footer::before { content: "=E2=80=94"; position: absolute; left:=
 -1em; }

.editor-wrap { margin: 1rem 0px 1rem -18px; position: relative; border-bott=
om: 1px solid rgb(68, 170, 187); }

.editor-controls { position: absolute; display: flex; flex-direction: colum=
n; top: -3px; right: -15px; }

.editor-controls button { color: rgb(136, 136, 136); font-size: 16px; backg=
round: transparent; padding: 0px; border: none; }

.sandbox-output { border-top: 1px solid rgb(68, 170, 187); padding: 4px 0px=
 4px 10px; white-space: pre; max-height: 25em; overflow: auto; }

.sandbox-output:empty { display: none; }

.editor-wrap iframe { display: block; border-width: 1px 1px 0px; border-sty=
le: solid dotted dotted; border-color: rgb(68, 170, 187); border-image: ini=
tial; padding: 0px; margin: 0px; width: 100%; box-sizing: border-box; }

.sandbox-output pre { margin: 0px; padding: 0px; white-space: pre-wrap; }

.sandbox-output-error { color: red; }

.sandbox-output-warn { color: orange; }

.sandbox-output-etc { color: rgb(17, 170, 17); background: rgb(221, 255, 22=
1); cursor: pointer; border-radius: 5px; padding: 0px 1px; }

.sandbox-output-prop { color: rgb(68, 68, 68); }

.sandbox-output-etc-block { display: inline-block; vertical-align: top; }

.sandbox-output-etc-block table { border-collapse: collapse; }

.sandbox-output-etc-block table td { vertical-align: top; white-space: pre-=
wrap; font-family: "PT Mono", monospace; }

.sandbox-output-etc-block table td:first-child { text-align: right; }

.tok-keyword, .sandbox-output-null, .sandbox-output-fun { color: rgb(85, 0,=
 102); }

.tok-atom, .sandbox-output-bool { color: rgb(17, 0, 102); }

.tok-number, .sandbox-output-number { color: rgb(0, 68, 34); }

.tok-definition { color: rgb(0, 0, 153); }

.tok-variableName2 { color: rgb(0, 34, 119); }

.tok-typeName { color: rgb(0, 119, 34); }

.tok-comment { color: rgb(119, 68, 0); }

.tok-string, .sandbox-output-string { color: rgb(119, 0, 0); }

.tok-string2 { color: rgb(204, 68, 0); }

.tok-invalid { color: rgb(255, 0, 0); }

.tok-meta { color: rgb(85, 85, 85); }

.cm-editor { height: auto; border-top: 1px solid rgb(68, 170, 187); overflo=
w-wrap: normal; }

.cm-editor .cm-scroller { line-height: 1.35; }

.cm-editor.cm-focused { outline: none; }

.cm-scroller { max-height: 500px; }

.cm-editor .cm-line { padding: 0px 4px 0px 10px; }

.cm-editor .cm-gutters { border: none; background: white; }

.cm-editor .cm-lineNumbers { padding: 0.5em 3px 0px 0px; min-width: 20px; c=
olor: rgb(68, 170, 187); font-size: 60%; }

.sandboxhint { position: absolute; right: -15px; font-family: tahoma, arial=
, sans-serif; font-size: 70%; padding: 4px 8px; background: rgb(180, 180, 1=
80); color: white; border-radius: 5px; }

@media screen and (max-width: 800px) {
  .sandboxhint { right: 5px; }
}

.sandboxhint::before { position: absolute; width: 0px; height: 0px; border-=
top: 6px solid transparent; border-bottom: 6px solid transparent; border-ri=
ght: 12px solid rgb(180, 180, 180); top: 6px; left: -11px; content: ""; }

figure { max-width: 640px; margin: 0px 30px; }

figure.chapter { text-align: center; margin: 3em 0px 2em; }

figure.chapter img { max-width: 75%; }

figure.framed img { border-radius: 50%; border: 4px double rgb(102, 102, 10=
2); }

figure.square-framed img { border-radius: 30px; border: 4px double rgb(102,=
 102, 102); }

span.keyname { font-variant: small-caps; }

@media screen and (max-width: 500px) {
  figure { margin: 0px; }
}

figure img { max-width: 100%; }

details.solution { color: rgb(17, 85, 102); }

details summary { cursor: pointer; }

details[open] summary { display: none; }

td { vertical-align: top; }

td + td { padding-left: 1em; }

table { margin-left: 15px; }

sub, sup { line-height: 1; }

sub { font-size: 60%; }

sup { font-size: 70%; }
------MultipartBoundary--tnlCDEymNh4kqPAHYgyDfFLtftrP4FXhODZa0L28jl----
Content-Type: image/jpeg
Content-Transfer-Encoding: base64
Content-Location: https://eloquentjavascript.net/img/chapter_picture_6.jpg

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

------MultipartBoundary--tnlCDEymNh4kqPAHYgyDfFLtftrP4FXhODZa0L28jl----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://eloquentjavascript.net/img/rabbits.svg

<?xml version=3D"1.0" encoding=3D"UTF-8" standalone=3D"no"?>
<svg xmlns=3D"http://www.w3.org/2000/svg" width=3D"621" height=3D"274" view=
Box=3D"-4 -82 621 274"><style>
    @font-face {
      font-family: 'PT Mono';
      font-style: normal;
      font-weight: 400;
      src: local('PT Mono'), local('PTMono-Regular'), url(http://themes.goo=
gleusercontent.com/static/fonts/ptmono/v1/jmle3kzCPnW8O7_gZGRDlQ.woff) form=
at('woff');
    }
    .objtext { font-family: "PT Mono"; font-size: 14px; stroke: none; }
    .objbox { border-radius: 2px; fill: white; stroke: black }
    .sep { stroke: #666 }
  </style>
<g><g><rect x=3D"210.5" y=3D"133.5" width=3D"202" height=3D"55" class=3D"ob=
jbox"></rect><text x=3D"221.5" y=3D"154.5" class=3D"objtext">toString: &lt;=
function&gt;</text><text x=3D"221.5" y=3D"176.5" class=3D"objtext">...</tex=
t></g><g><rect x=3D"121.5" y=3D"83.5" width=3D"178" height=3D"55" class=3D"=
objbox"></rect><text x=3D"132.5" y=3D"104.5" class=3D"objtext">teeth: "smal=
l"</text><text x=3D"132.5" y=3D"126.5" class=3D"objtext">speak: &lt;functio=
n&gt;</text></g><g><rect x=3D"0.5" y=3D"0.5" width=3D"242" height=3D"88" cl=
ass=3D"objbox"></rect><text x=3D"11" y=3D"21" class=3D"objtext">killerRabbi=
t</text><text x=3D"11" y=3D"54" class=3D"objtext">teeth: "long, sharp, ..."=
</text><text x=3D"11" y=3D"76" class=3D"objtext">type: "killer"</text><path=
 d=3D"M 0.5 33.5 L 242.5 33.5" class=3D"sep"></path></g><g><rect x=3D"282.5=
" y=3D"-79.5" width=3D"114" height=3D"66" class=3D"objbox"></rect><text x=
=3D"293.5" y=3D"-58.5" class=3D"objtext">Rabbit</text><text x=3D"293.5" y=
=3D"-25.5" class=3D"objtext">prototype</text><path d=3D"M 282.5 -46.5 L 396=
.5 -46.5" class=3D"sep"></path></g><path d=3D"M 329.5 -19.5 L 259.5 83.5" c=
lass=3D"sep"></path><path d=3D"M 0 0 L 3 8 L 0 7 L -3 8 Z" stroke=3D"none" =
fill=3D"rgb(102, 102, 102)" transform=3D"translate(259.5 83.5) rotate(214.2=
0048413026853) scale(1)"></path><g><rect x=3D"426.5" y=3D"-9.5" width=3D"18=
6" height=3D"110" class=3D"objbox"></rect><text x=3D"437.5" y=3D"11.5" clas=
s=3D"objtext">Object</text><text x=3D"437.5" y=3D"44.5" class=3D"objtext">c=
reate: &lt;function&gt;</text><text x=3D"437.5" y=3D"66.5" class=3D"objtext=
">prototype</text><text x=3D"437.5" y=3D"88.5" class=3D"objtext">...</text>=
<path d=3D"M 426.5 23.5 L 612.5 23.5" class=3D"sep"></path></g><path d=3D"M=
 432.5 70.5 L 331.5 133.5" class=3D"sep"></path><path d=3D"M 0 0 L 3 8 L 0 =
7 L -3 8 Z" stroke=3D"none" fill=3D"rgb(102, 102, 102)" transform=3D"transl=
ate(331.5 133.5) rotate(238.0456370629486) scale(1)"></path></g></svg>=0A
------MultipartBoundary--tnlCDEymNh4kqPAHYgyDfFLtftrP4FXhODZa0L28jl----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: chrome-extension://pbanhockgagggenencehbnadejlgchfc/css/styles.css

@charset "utf-8";

.carousel .control-arrow, .carousel.carousel-slider .control-arrow { backgr=
ound: none; border: 0px; cursor: pointer; font-size: 32px; opacity: 0.4; po=
sition: absolute; top: 20px; transition: all 0.25s ease-in 0s; z-index: 2; =
}

.carousel .control-arrow:focus, .carousel .control-arrow:hover { opacity: 1=
; }

.carousel .control-arrow::before, .carousel.carousel-slider .control-arrow:=
:before { border-bottom: 8px solid transparent; border-top: 8px solid trans=
parent; content: ""; display: inline-block; margin: 0px 5px; }

.carousel .control-disabled.control-arrow { cursor: inherit; display: none;=
 opacity: 0; }

.carousel .control-prev.control-arrow { left: 0px; }

.carousel .control-prev.control-arrow::before { border-right: 8px solid rgb=
(255, 255, 255); }

.carousel .control-next.control-arrow { right: 0px; }

.carousel .control-next.control-arrow::before { border-left: 8px solid rgb(=
255, 255, 255); }

.carousel-root { outline: none; }

.carousel { position: relative; width: 100%; }

.carousel * { box-sizing: border-box; }

.carousel img { display: inline-block; pointer-events: none; width: 100%; }

.carousel .carousel { position: relative; }

.carousel .control-arrow { background: none; border: 0px; font-size: 18px; =
margin-top: -13px; outline: 0px; top: 50%; }

.carousel .thumbs-wrapper { margin: 20px; overflow: hidden; }

.carousel .thumbs { list-style: none; position: relative; transform: transl=
ateZ(0px); transition: all 0.15s ease-in 0s; white-space: nowrap; }

.carousel .thumb { border: 3px solid rgb(255, 255, 255); display: inline-bl=
ock; margin-right: 6px; overflow: hidden; padding: 2px; transition: border =
0.15s ease-in 0s; white-space: nowrap; }

.carousel .thumb:focus { border: 3px solid rgb(204, 204, 204); outline: non=
e; }

.carousel .thumb.selected, .carousel .thumb:hover { border: 3px solid rgb(5=
1, 51, 51); }

.carousel .thumb img { vertical-align: top; }

.carousel.carousel-slider { margin: 0px; overflow: hidden; position: relati=
ve; }

.carousel.carousel-slider .control-arrow { bottom: 0px; color: rgb(255, 255=
, 255); font-size: 26px; margin-top: 0px; padding: 5px; top: 0px; }

.carousel.carousel-slider .control-arrow:hover { background: rgba(0, 0, 0, =
0.2); }

.carousel .slider-wrapper { margin: auto; overflow: hidden; transition: hei=
ght 0.15s ease-in 0s; width: 100%; }

.carousel .slider-wrapper.axis-horizontal .slider { display: flex; }

.carousel .slider-wrapper.axis-horizontal .slider .slide { flex-flow: colum=
n; }

.carousel .slider-wrapper.axis-vertical { display: flex; }

.carousel .slider-wrapper.axis-vertical .slider { flex-direction: column; }

.carousel .slider { list-style: none; margin: 0px; padding: 0px; position: =
relative; width: 100%; }

.carousel .slider.animated { transition: all 0.35s ease-in-out 0s; }

.carousel .slide { margin: 0px; min-width: 100%; position: relative; text-a=
lign: center; }

.carousel .slide img { border: 0px; vertical-align: top; width: 100%; }

.carousel .slide iframe { border: 0px; display: inline-block; margin: 0px 4=
0px 40px; width: calc(100% - 80px); }

.carousel .slide .legend { background: rgb(0, 0, 0); border-radius: 10px; b=
ottom: 40px; color: rgb(255, 255, 255); font-size: 12px; left: 50%; margin-=
left: -45%; opacity: 0.25; padding: 10px; position: absolute; text-align: c=
enter; transition: opacity 0.35s ease-in-out 0s; width: 90%; }

.carousel .control-dots { bottom: 0px; margin: 10px 0px; padding: 0px; posi=
tion: absolute; text-align: center; width: 100%; z-index: 1; }

@media (min-width: 960px) {
  .carousel .control-dots { bottom: 0px; }
}

.carousel .control-dots .dot { background: rgb(255, 255, 255); border-radiu=
s: 50%; box-shadow: rgba(0, 0, 0, 0.9) 1px 1px 2px; cursor: pointer; displa=
y: inline-block; height: 8px; margin: 0px 8px; opacity: 0.3; transition: op=
acity 0.25s ease-in 0s; width: 8px; }

.carousel .control-dots .dot.selected, .carousel .control-dots .dot:hover {=
 opacity: 1; }

.carousel .carousel-status { color: rgb(255, 255, 255); font-size: 10px; pa=
dding: 5px; position: absolute; right: 0px; text-shadow: rgba(0, 0, 0, 0.9)=
 1px 1px 1px; top: 0px; }

.carousel:hover .slide .legend { opacity: 1; }

@font-face { font-family: Palanquin; font-style: normal; font-weight: 100; =
src: local(""), url("../assets/fonts/palanquin-v11-latin-100.woff2") format=
("woff2"); }

@font-face { font-family: Palanquin; font-style: normal; font-weight: 200; =
src: local(""), url("../assets/fonts/palanquin-v11-latin-200.woff2") format=
("woff2"); }

@font-face { font-family: Palanquin; font-style: normal; font-weight: 300; =
src: local(""), url("../assets/fonts/palanquin-v11-latin-300.woff2") format=
("woff2"); }

@font-face { font-family: Palanquin; font-style: normal; font-weight: 400; =
src: local(""), url("../assets/fonts/palanquin-v11-latin-regular.woff2") fo=
rmat("woff2"); }

@font-face { font-family: Palanquin; font-style: normal; font-weight: 500; =
src: local(""), url("../assets/fonts/palanquin-v11-latin-500.woff2") format=
("woff2"); }

@font-face { font-family: Palanquin; font-style: normal; font-weight: 600; =
src: local(""), url("../assets/fonts/palanquin-v11-latin-600.woff2") format=
("woff2"); }

@font-face { font-family: Palanquin; font-style: normal; font-weight: 700; =
src: local(""), url("../assets/fonts/palanquin-v11-latin-700.woff2") format=
("woff2"); }

*, ::after, ::before { border: 0px solid rgb(229, 231, 235); box-sizing: bo=
rder-box; }

::after, ::before { --tw-content: ""; }

:host, html { line-height: 1.5; text-size-adjust: 100%; font-family: Palanq=
uin, ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI E=
moji", "Segoe UI Symbol", "Noto Color Emoji"; font-feature-settings: normal=
; font-variation-settings: normal; tab-size: 4; -webkit-tap-highlight-color=
: transparent; }

body { line-height: inherit; margin: 0px; }

hr { border-top-width: 1px; color: inherit; height: 0px; }

abbr:where([title]) { text-decoration: underline dotted; }

h1, h2, h3, h4, h5, h6 { font-size: inherit; font-weight: inherit; }

a { color: inherit; text-decoration: inherit; }

b, strong { font-weight: bolder; }

code, kbd, pre, samp { font-family: ui-monospace, SFMono-Regular, Menlo, Mo=
naco, Consolas, "Liberation Mono", "Courier New", monospace; font-feature-s=
ettings: normal; font-size: 1em; font-variation-settings: normal; }

small { font-size: 80%; }

sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-ali=
gn: baseline; }

sub { bottom: -0.25em; }

sup { top: -0.5em; }

table { border-collapse: collapse; border-color: inherit; text-indent: 0px;=
 }

button, input, optgroup, select, textarea { color: inherit; font-family: in=
herit; font-feature-settings: inherit; font-size: 100%; font-variation-sett=
ings: inherit; font-weight: inherit; line-height: inherit; margin: 0px; pad=
ding: 0px; }

button, select { text-transform: none; }

[type=3D"button"], [type=3D"reset"], [type=3D"submit"], button { appearance=
: button; background-color: transparent; background-image: none; }

progress { vertical-align: baseline; }

::-webkit-inner-spin-button, ::-webkit-outer-spin-button { height: auto; }

[type=3D"search"] { appearance: textfield; outline-offset: -2px; }

::-webkit-search-decoration { appearance: none; }

::-webkit-file-upload-button { appearance: button; font: inherit; }

summary { display: list-item; }

blockquote, dd, dl, figure, h1, h2, h3, h4, h5, h6, hr, p, pre { margin: 0p=
x; }

fieldset { margin: 0px; }

fieldset, legend { padding: 0px; }

menu, ol, ul { list-style: none; margin: 0px; padding: 0px; }

dialog { padding: 0px; }

textarea { resize: vertical; }

input::placeholder, textarea::placeholder { color: rgb(156, 163, 175); }

[role=3D"button"], button { cursor: pointer; }

:disabled { cursor: default; }

audio, canvas, embed, iframe, img, object, svg, video { display: block; ver=
tical-align: middle; }

img, video { height: auto; max-width: 100%; }

[hidden] { display: none; }

[multiple], [type=3D"date"], [type=3D"datetime-local"], [type=3D"email"], [=
type=3D"month"], [type=3D"number"], [type=3D"password"], [type=3D"search"],=
 [type=3D"tel"], [type=3D"text"], [type=3D"time"], [type=3D"url"], [type=3D=
"week"], input:where(:not([type])), select, textarea { appearance: none; ba=
ckground-color: rgb(255, 255, 255); border-color: rgb(107, 114, 128); borde=
r-radius: 0px; border-width: 1px; font-size: 1rem; line-height: 1.5rem; pad=
ding: 0.5rem 0.75rem; --tw-shadow: 0 0 #0000; }

[multiple]:focus, [type=3D"date"]:focus, [type=3D"datetime-local"]:focus, [=
type=3D"email"]:focus, [type=3D"month"]:focus, [type=3D"number"]:focus, [ty=
pe=3D"password"]:focus, [type=3D"search"]:focus, [type=3D"tel"]:focus, [typ=
e=3D"text"]:focus, [type=3D"time"]:focus, [type=3D"url"]:focus, [type=3D"we=
ek"]:focus, input:where(:not([type])):focus, select:focus, textarea:focus {=
 outline: transparent solid 2px; outline-offset: 2px; --tw-ring-inset: var(=
--tw-empty,   ); --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff;=
 --tw-ring-color: #2563eb; --tw-ring-offset-shadow: var(--tw-ring-inset) 0 =
0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color); --tw-ring-shad=
ow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(=
--tw-ring-color); border-color: rgb(37, 99, 235); box-shadow: var(--tw-ring=
-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow); }

input::placeholder, textarea::placeholder { color: rgb(107, 114, 128); opac=
ity: 1; }

::-webkit-datetime-edit-fields-wrapper { padding: 0px; }

::-webkit-date-and-time-value { min-height: 1.5em; text-align: inherit; }

::-webkit-datetime-edit { display: inline-flex; }

::-webkit-datetime-edit, ::-webkit-datetime-edit-day-field, ::-webkit-datet=
ime-edit-hour-field, ::-webkit-datetime-edit-meridiem-field, ::-webkit-date=
time-edit-millisecond-field, ::-webkit-datetime-edit-minute-field, ::-webki=
t-datetime-edit-month-field, ::-webkit-datetime-edit-second-field, ::-webki=
t-datetime-edit-year-field { padding-bottom: 0px; padding-top: 0px; }

select { background-image: url("data:image/svg+xml;charset=3Dutf-8,%3Csvg x=
mlns=3D'http://www.w3.org/2000/svg' fill=3D'none' viewBox=3D'0 0 20 20'%3E%=
3Cpath stroke=3D'%236b7280' stroke-linecap=3D'round' stroke-linejoin=3D'rou=
nd' stroke-width=3D'1.5' d=3D'm6 8 4 4 4-4'/%3E%3C/svg%3E"); background-pos=
ition: right 0.5rem center; background-repeat: no-repeat; background-size: =
1.5em 1.5em; padding-right: 2.5rem; -webkit-print-color-adjust: exact; }

[multiple], [size]:where(select:not([size=3D"1"])) { background-image: none=
; background-position: 0px 0px; background-repeat: unset; background-size: =
initial; padding-right: 0.75rem; -webkit-print-color-adjust: unset; }

[type=3D"checkbox"], [type=3D"radio"] { appearance: none; background-color:=
 rgb(255, 255, 255); background-origin: border-box; border-color: rgb(107, =
114, 128); border-width: 1px; color: rgb(37, 99, 235); display: inline-bloc=
k; flex-shrink: 0; height: 1rem; padding: 0px; -webkit-print-color-adjust: =
exact; user-select: none; vertical-align: middle; width: 1rem; --tw-shadow:=
 0 0 #0000; }

[type=3D"checkbox"] { border-radius: 0px; }

[type=3D"radio"] { border-radius: 100%; }

[type=3D"checkbox"]:focus, [type=3D"radio"]:focus { outline: transparent so=
lid 2px; outline-offset: 2px; --tw-ring-inset: var(--tw-empty,   ); --tw-ri=
ng-offset-width: 2px; --tw-ring-offset-color: #fff; --tw-ring-color: #2563e=
b; --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset=
-width) var(--tw-ring-offset-color); --tw-ring-shadow: var(--tw-ring-inset)=
 0 0 0 calc(2px + var(--tw-ring-offset-width)) var(--tw-ring-color); box-sh=
adow: var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow); =
}

[type=3D"checkbox"]:checked, [type=3D"radio"]:checked { background-color: c=
urrentcolor; background-position: 50% center; background-repeat: no-repeat;=
 background-size: 100% 100%; border-color: transparent; }

[type=3D"checkbox"]:checked { background-image: url("data:image/svg+xml;cha=
rset=3Dutf-8,%3Csvg xmlns=3D'http://www.w3.org/2000/svg' fill=3D'%23fff' vi=
ewBox=3D'0 0 16 16'%3E%3Cpath d=3D'M12.207 4.793a1 1 0 0 1 0 1.414l-5 5a1 1=
 0 0 1-1.414 0l-2-2a1 1 0 0 1 1.414-1.414L6.5 9.086l4.293-4.293a1 1 0 0 1 1=
.414 0'/%3E%3C/svg%3E"); }

@media (forced-colors: active) {
  [type=3D"checkbox"]:checked { appearance: auto; }
}

[type=3D"radio"]:checked { background-image: url("data:image/svg+xml;charse=
t=3Dutf-8,%3Csvg xmlns=3D'http://www.w3.org/2000/svg' fill=3D'%23fff' viewB=
ox=3D'0 0 16 16'%3E%3Ccircle cx=3D'8' cy=3D'8' r=3D'3'/%3E%3C/svg%3E"); }

@media (forced-colors: active) {
  [type=3D"radio"]:checked { appearance: auto; }
}

[type=3D"checkbox"]:checked:focus, [type=3D"checkbox"]:checked:hover, [type=
=3D"radio"]:checked:focus, [type=3D"radio"]:checked:hover { background-colo=
r: currentcolor; border-color: transparent; }

[type=3D"checkbox"]:indeterminate { background-color: currentcolor; backgro=
und-image: url("data:image/svg+xml;charset=3Dutf-8,%3Csvg xmlns=3D'http://w=
ww.w3.org/2000/svg' fill=3D'none' viewBox=3D'0 0 16 16'%3E%3Cpath stroke=3D=
'%23fff' stroke-linecap=3D'round' stroke-linejoin=3D'round' stroke-width=3D=
'2' d=3D'M4 8h8'/%3E%3C/svg%3E"); background-position: 50% center; backgrou=
nd-repeat: no-repeat; background-size: 100% 100%; border-color: transparent=
; }

@media (forced-colors: active) {
  [type=3D"checkbox"]:indeterminate { appearance: auto; }
}

[type=3D"checkbox"]:indeterminate:focus, [type=3D"checkbox"]:indeterminate:=
hover { background-color: currentcolor; border-color: transparent; }

[type=3D"file"] { background: unset; border-color: inherit; border-radius: =
0px; border-width: 0px; font-size: unset; line-height: inherit; padding: 0p=
x; }

[type=3D"file"]:focus { outline: -webkit-focus-ring-color auto 1px; }

body { font-family: Palanquin, system-ui, sans-serif; }

*, ::after, ::before { --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; =
--tw-translate-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; -=
-tw-skew-y: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-pan-x: ; --tw-pan-y: =
; --tw-pinch-zoom: ; --tw-scroll-snap-strictness: proximity; --tw-gradient-=
from-position: ; --tw-gradient-via-position: ; --tw-gradient-to-position: ;=
 --tw-ordinal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-s=
pacing: ; --tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-widt=
h: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(59,130,246,.5);=
 --tw-ring-offset-shadow: 0 0 #0000; --tw-ring-shadow: 0 0 #0000; --tw-shad=
ow: 0 0 #0000; --tw-shadow-colored: 0 0 #0000; --tw-blur: ; --tw-brightness=
: ; --tw-contrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --=
tw-saturate: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw=
-backdrop-brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: =
; --tw-backdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity=
: ; --tw-backdrop-saturate: ; --tw-backdrop-sepia: ; }

::backdrop { --tw-border-spacing-x: 0; --tw-border-spacing-y: 0; --tw-trans=
late-x: 0; --tw-translate-y: 0; --tw-rotate: 0; --tw-skew-x: 0; --tw-skew-y=
: 0; --tw-scale-x: 1; --tw-scale-y: 1; --tw-pan-x: ; --tw-pan-y: ; --tw-pin=
ch-zoom: ; --tw-scroll-snap-strictness: proximity; --tw-gradient-from-posit=
ion: ; --tw-gradient-via-position: ; --tw-gradient-to-position: ; --tw-ordi=
nal: ; --tw-slashed-zero: ; --tw-numeric-figure: ; --tw-numeric-spacing: ; =
--tw-numeric-fraction: ; --tw-ring-inset: ; --tw-ring-offset-width: 0px; --=
tw-ring-offset-color: #fff; --tw-ring-color: rgba(59,130,246,.5); --tw-ring=
-offset-shadow: 0 0 #0000; --tw-ring-shadow: 0 0 #0000; --tw-shadow: 0 0 #0=
000; --tw-shadow-colored: 0 0 #0000; --tw-blur: ; --tw-brightness: ; --tw-c=
ontrast: ; --tw-grayscale: ; --tw-hue-rotate: ; --tw-invert: ; --tw-saturat=
e: ; --tw-sepia: ; --tw-drop-shadow: ; --tw-backdrop-blur: ; --tw-backdrop-=
brightness: ; --tw-backdrop-contrast: ; --tw-backdrop-grayscale: ; --tw-bac=
kdrop-hue-rotate: ; --tw-backdrop-invert: ; --tw-backdrop-opacity: ; --tw-b=
ackdrop-saturate: ; --tw-backdrop-sepia: ; }

.\!container { width: 100% !important; }

.container { width: 100%; }

@media (min-width: 640px) {
  .\!container { max-width: 640px !important; }
  .container { max-width: 640px; }
}

@media (min-width: 1024px) {
  .\!container { max-width: 1024px !important; }
  .container { max-width: 1024px; }
}

.form-input, .form-multiselect, .form-select, .form-textarea { appearance: =
none; background-color: rgb(255, 255, 255); border-color: rgb(107, 114, 128=
); border-radius: 0px; border-width: 1px; font-size: 1rem; line-height: 1.5=
rem; padding: 0.5rem 0.75rem; --tw-shadow: 0 0 #0000; }

.form-input:focus, .form-multiselect:focus, .form-select:focus, .form-texta=
rea:focus { outline: transparent solid 2px; outline-offset: 2px; --tw-ring-=
inset: var(--tw-empty,   ); --tw-ring-offset-width: 0px; --tw-ring-offset-c=
olor: #fff; --tw-ring-color: #2563eb; --tw-ring-offset-shadow: var(--tw-rin=
g-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color); --t=
w-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-w=
idth)) var(--tw-ring-color); border-color: rgb(37, 99, 235); box-shadow: va=
r(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow); }

.form-input::placeholder, .form-textarea::placeholder { color: rgb(107, 114=
, 128); opacity: 1; }

.form-input::-webkit-datetime-edit-fields-wrapper { padding: 0px; }

.form-input::-webkit-date-and-time-value { min-height: 1.5em; text-align: i=
nherit; }

.form-input::-webkit-datetime-edit { display: inline-flex; }

.form-input::-webkit-datetime-edit, .form-input::-webkit-datetime-edit-day-=
field, .form-input::-webkit-datetime-edit-hour-field, .form-input::-webkit-=
datetime-edit-meridiem-field, .form-input::-webkit-datetime-edit-millisecon=
d-field, .form-input::-webkit-datetime-edit-minute-field, .form-input::-web=
kit-datetime-edit-month-field, .form-input::-webkit-datetime-edit-second-fi=
eld, .form-input::-webkit-datetime-edit-year-field { padding-bottom: 0px; p=
adding-top: 0px; }

.prose { color: var(--tw-prose-body); max-width: 65ch; }

.prose :where(p):not(:where([class~=3D"not-prose"], [class~=3D"not-prose"] =
*)) { margin-bottom: 1.25em; margin-top: 1.25em; }

.prose :where([class~=3D"lead"]):not(:where([class~=3D"not-prose"], [class~=
=3D"not-prose"] *)) { color: var(--tw-prose-lead); font-size: 1.25em; line-=
height: 1.6; margin-bottom: 1.2em; margin-top: 1.2em; }

.prose :where(a):not(:where([class~=3D"not-prose"], [class~=3D"not-prose"] =
*)) { color: var(--tw-prose-links); font-weight: 500; text-decoration: unde=
rline; }

.prose :where(strong):not(:where([class~=3D"not-prose"], [class~=3D"not-pro=
se"] *)) { color: var(--tw-prose-bold); font-weight: 600; }

.prose :where(a strong):not(:where([class~=3D"not-prose"], [class~=3D"not-p=
rose"] *)) { color: inherit; }

.prose :where(blockquote strong):not(:where([class~=3D"not-prose"], [class~=
=3D"not-prose"] *)) { color: inherit; }

.prose :where(thead th strong):not(:where([class~=3D"not-prose"], [class~=
=3D"not-prose"] *)) { color: inherit; }

.prose :where(ol):not(:where([class~=3D"not-prose"], [class~=3D"not-prose"]=
 *)) { list-style-type: decimal; margin-bottom: 1.25em; margin-top: 1.25em;=
 padding-left: 1.625em; }

.prose :where(ol[type=3D"A"]):not(:where([class~=3D"not-prose"], [class~=3D=
"not-prose"] *)) { list-style-type: upper-alpha; }

.prose :where(ol[type=3D"a"]):not(:where([class~=3D"not-prose"], [class~=3D=
"not-prose"] *)) { list-style-type: lower-alpha; }

.prose :where():not(:where([class~=3D"not-prose"], [class~=3D"not-prose"] *=
)) { list-style-type: upper-alpha; }

.prose :where():not(:where([class~=3D"not-prose"], [class~=3D"not-prose"] *=
)) { list-style-type: lower-alpha; }

.prose :where(ol[type=3D"I"]):not(:where([class~=3D"not-prose"], [class~=3D=
"not-prose"] *)) { list-style-type: upper-roman; }

.prose :where(ol[type=3D"i"]):not(:where([class~=3D"not-prose"], [class~=3D=
"not-prose"] *)) { list-style-type: lower-roman; }

.prose :where():not(:where([class~=3D"not-prose"], [class~=3D"not-prose"] *=
)) { list-style-type: upper-roman; }

.prose :where():not(:where([class~=3D"not-prose"], [class~=3D"not-prose"] *=
)) { list-style-type: lower-roman; }

.prose :where(ol[type=3D"1"]):not(:where([class~=3D"not-prose"], [class~=3D=
"not-prose"] *)) { list-style-type: decimal; }

.prose :where(ul):not(:where([class~=3D"not-prose"], [class~=3D"not-prose"]=
 *)) { list-style-type: disc; margin-bottom: 1.25em; margin-top: 1.25em; pa=
dding-left: 1.625em; }

.prose :where(ol > li):not(:where([class~=3D"not-prose"], [class~=3D"not-pr=
ose"] *))::marker { color: var(--tw-prose-counters); font-weight: 400; }

.prose :where(ul > li):not(:where([class~=3D"not-prose"], [class~=3D"not-pr=
ose"] *))::marker { color: var(--tw-prose-bullets); }

.prose :where(dt):not(:where([class~=3D"not-prose"], [class~=3D"not-prose"]=
 *)) { color: var(--tw-prose-headings); font-weight: 600; margin-top: 1.25e=
m; }

.prose :where(hr):not(:where([class~=3D"not-prose"], [class~=3D"not-prose"]=
 *)) { border-color: var(--tw-prose-hr); border-top-width: 1px; margin-bott=
om: 3em; margin-top: 3em; }

.prose :where(blockquote):not(:where([class~=3D"not-prose"], [class~=3D"not=
-prose"] *)) { border-left-color: var(--tw-prose-quote-borders); border-lef=
t-width: 0.25rem; color: var(--tw-prose-quotes); font-style: italic; font-w=
eight: 500; margin-bottom: 1.6em; margin-top: 1.6em; padding-left: 1em; quo=
tes: "=E2=80=9C" "=E2=80=9D" "=E2=80=98" "=E2=80=99"; }

.prose :where(blockquote p:first-of-type):not(:where([class~=3D"not-prose"]=
, [class~=3D"not-prose"] *))::before { content: open-quote; }

.prose :where(blockquote p:last-of-type):not(:where([class~=3D"not-prose"],=
 [class~=3D"not-prose"] *))::after { content: close-quote; }

.prose :where(h1):not(:where([class~=3D"not-prose"], [class~=3D"not-prose"]=
 *)) { color: var(--tw-prose-headings); font-size: 2.25em; font-weight: 800=
; line-height: 1.11111; margin-bottom: 0.888889em; margin-top: 0px; }

.prose :where(h1 strong):not(:where([class~=3D"not-prose"], [class~=3D"not-=
prose"] *)) { color: inherit; font-weight: 900; }

.prose :where(h2):not(:where([class~=3D"not-prose"], [class~=3D"not-prose"]=
 *)) { color: var(--tw-prose-headings); font-size: 1.5em; font-weight: 700;=
 line-height: 1.33333; margin-bottom: 1em; margin-top: 2em; }

.prose :where(h2 strong):not(:where([class~=3D"not-prose"], [class~=3D"not-=
prose"] *)) { color: inherit; font-weight: 800; }

.prose :where(h3):not(:where([class~=3D"not-prose"], [class~=3D"not-prose"]=
 *)) { color: var(--tw-prose-headings); font-size: 1.25em; font-weight: 600=
; line-height: 1.6; margin-bottom: 0.6em; margin-top: 1.6em; }

.prose :where(h3 strong):not(:where([class~=3D"not-prose"], [class~=3D"not-=
prose"] *)) { color: inherit; font-weight: 700; }

.prose :where(h4):not(:where([class~=3D"not-prose"], [class~=3D"not-prose"]=
 *)) { color: var(--tw-prose-headings); font-weight: 600; line-height: 1.5;=
 margin-bottom: 0.5em; margin-top: 1.5em; }

.prose :where(h4 strong):not(:where([class~=3D"not-prose"], [class~=3D"not-=
prose"] *)) { color: inherit; font-weight: 700; }

.prose :where(img):not(:where([class~=3D"not-prose"], [class~=3D"not-prose"=
] *)) { margin-bottom: 2em; margin-top: 2em; }

.prose :where(picture):not(:where([class~=3D"not-prose"], [class~=3D"not-pr=
ose"] *)) { display: block; margin-bottom: 2em; margin-top: 2em; }

.prose :where(kbd):not(:where([class~=3D"not-prose"], [class~=3D"not-prose"=
] *)) { border-radius: 0.3125rem; box-shadow: 0 0 0 1px rgb(var(--tw-prose-=
kbd-shadows)/10%),0 3px 0 rgb(var(--tw-prose-kbd-shadows)/10%); color: var(=
--tw-prose-kbd); font-family: inherit; font-size: 0.875em; font-weight: 500=
; padding: 0.1875em 0.375em; }

.prose :where(code):not(:where([class~=3D"not-prose"], [class~=3D"not-prose=
"] *)) { color: var(--tw-prose-code); font-size: 0.875em; font-weight: 600;=
 }

.prose :where(code):not(:where([class~=3D"not-prose"], [class~=3D"not-prose=
"] *))::before { content: "`"; }

.prose :where(code):not(:where([class~=3D"not-prose"], [class~=3D"not-prose=
"] *))::after { content: "`"; }

.prose :where(a code):not(:where([class~=3D"not-prose"], [class~=3D"not-pro=
se"] *)) { color: inherit; }

.prose :where(h1 code):not(:where([class~=3D"not-prose"], [class~=3D"not-pr=
ose"] *)) { color: inherit; }

.prose :where(h2 code):not(:where([class~=3D"not-prose"], [class~=3D"not-pr=
ose"] *)) { color: inherit; font-size: 0.875em; }

.prose :where(h3 code):not(:where([class~=3D"not-prose"], [class~=3D"not-pr=
ose"] *)) { color: inherit; font-size: 0.9em; }

.prose :where(h4 code):not(:where([class~=3D"not-prose"], [class~=3D"not-pr=
ose"] *)) { color: inherit; }

.prose :where(blockquote code):not(:where([class~=3D"not-prose"], [class~=
=3D"not-prose"] *)) { color: inherit; }

.prose :where(thead th code):not(:where([class~=3D"not-prose"], [class~=3D"=
not-prose"] *)) { color: inherit; }

.prose :where(pre):not(:where([class~=3D"not-prose"], [class~=3D"not-prose"=
] *)) { background-color: var(--tw-prose-pre-bg); border-radius: 0.375rem; =
color: var(--tw-prose-pre-code); font-size: 0.875em; font-weight: 400; line=
-height: 1.71429; margin-bottom: 1.71429em; margin-top: 1.71429em; overflow=
-x: auto; padding: 0.857143em 1.14286em; }

.prose :where(pre code):not(:where([class~=3D"not-prose"], [class~=3D"not-p=
rose"] *)) { background-color: transparent; border-radius: 0px; border-widt=
h: 0px; color: inherit; font-family: inherit; font-size: inherit; font-weig=
ht: inherit; line-height: inherit; padding: 0px; }

.prose :where(pre code):not(:where([class~=3D"not-prose"], [class~=3D"not-p=
rose"] *))::before { content: none; }

.prose :where(pre code):not(:where([class~=3D"not-prose"], [class~=3D"not-p=
rose"] *))::after { content: none; }

.prose :where(table):not(:where([class~=3D"not-prose"], [class~=3D"not-pros=
e"] *)) { font-size: 0.875em; line-height: 1.71429; margin-bottom: 2em; mar=
gin-top: 2em; table-layout: auto; text-align: left; width: 100%; }

.prose :where(thead):not(:where([class~=3D"not-prose"], [class~=3D"not-pros=
e"] *)) { border-bottom-color: var(--tw-prose-th-borders); border-bottom-wi=
dth: 1px; }

.prose :where(thead th):not(:where([class~=3D"not-prose"], [class~=3D"not-p=
rose"] *)) { color: var(--tw-prose-headings); font-weight: 600; padding-bot=
tom: 0.571429em; padding-left: 0.571429em; padding-right: 0.571429em; verti=
cal-align: bottom; }

.prose :where(tbody tr):not(:where([class~=3D"not-prose"], [class~=3D"not-p=
rose"] *)) { border-bottom-color: var(--tw-prose-td-borders); border-bottom=
-width: 1px; }

.prose :where(tbody tr:last-child):not(:where([class~=3D"not-prose"], [clas=
s~=3D"not-prose"] *)) { border-bottom-width: 0px; }

.prose :where(tbody td):not(:where([class~=3D"not-prose"], [class~=3D"not-p=
rose"] *)) { vertical-align: baseline; }

.prose :where(tfoot):not(:where([class~=3D"not-prose"], [class~=3D"not-pros=
e"] *)) { border-top-color: var(--tw-prose-th-borders); border-top-width: 1=
px; }

.prose :where(tfoot td):not(:where([class~=3D"not-prose"], [class~=3D"not-p=
rose"] *)) { vertical-align: top; }

.prose :where(figure > *):not(:where([class~=3D"not-prose"], [class~=3D"not=
-prose"] *)) { margin-bottom: 0px; margin-top: 0px; }

.prose :where(figcaption):not(:where([class~=3D"not-prose"], [class~=3D"not=
-prose"] *)) { color: var(--tw-prose-captions); font-size: 0.875em; line-he=
ight: 1.42857; margin-top: 0.857143em; }

.prose { --tw-prose-body: #374151; --tw-prose-headings: #111827; --tw-prose=
-lead: #4b5563; --tw-prose-links: #111827; --tw-prose-bold: #111827; --tw-p=
rose-counters: #6b7280; --tw-prose-bullets: #d1d5db; --tw-prose-hr: #e5e7eb=
; --tw-prose-quotes: #111827; --tw-prose-quote-borders: #e5e7eb; --tw-prose=
-captions: #6b7280; --tw-prose-kbd: #111827; --tw-prose-kbd-shadows: 17 24 =
39; --tw-prose-code: #111827; --tw-prose-pre-code: #e5e7eb; --tw-prose-pre-=
bg: #1f2937; --tw-prose-th-borders: #d1d5db; --tw-prose-td-borders: #e5e7eb=
; --tw-prose-invert-body: #d1d5db; --tw-prose-invert-headings: #fff; --tw-p=
rose-invert-lead: #9ca3af; --tw-prose-invert-links: #fff; --tw-prose-invert=
-bold: #fff; --tw-prose-invert-counters: #9ca3af; --tw-prose-invert-bullets=
: #4b5563; --tw-prose-invert-hr: #374151; --tw-prose-invert-quotes: #f3f4f6=
; --tw-prose-invert-quote-borders: #374151; --tw-prose-invert-captions: #9c=
a3af; --tw-prose-invert-kbd: #fff; --tw-prose-invert-kbd-shadows: 255 255 2=
55; --tw-prose-invert-code: #fff; --tw-prose-invert-pre-code: #d1d5db; --tw=
-prose-invert-pre-bg: rgba(0,0,0,.5); --tw-prose-invert-th-borders: #4b5563=
; --tw-prose-invert-td-borders: #374151; font-size: 1rem; line-height: 1.75=
; }

.prose :where(picture > img):not(:where([class~=3D"not-prose"], [class~=3D"=
not-prose"] *)) { margin-bottom: 0px; margin-top: 0px; }

.prose :where(video):not(:where([class~=3D"not-prose"], [class~=3D"not-pros=
e"] *)) { margin-bottom: 2em; margin-top: 2em; }

.prose :where(li):not(:where([class~=3D"not-prose"], [class~=3D"not-prose"]=
 *)) { margin-bottom: 0.5em; margin-top: 0.5em; }

.prose :where(ol > li):not(:where([class~=3D"not-prose"], [class~=3D"not-pr=
ose"] *)) { padding-left: 0.375em; }

.prose :where(ul > li):not(:where([class~=3D"not-prose"], [class~=3D"not-pr=
ose"] *)) { padding-left: 0.375em; }

.prose :where(.prose > ul > li p):not(:where([class~=3D"not-prose"], [class=
~=3D"not-prose"] *)) { margin-bottom: 0.75em; margin-top: 0.75em; }

.prose :where(.prose > ul > li > :first-child):not(:where([class~=3D"not-pr=
ose"], [class~=3D"not-prose"] *)) { margin-top: 1.25em; }

.prose :where(.prose > ul > li > :last-child):not(:where([class~=3D"not-pro=
se"], [class~=3D"not-prose"] *)) { margin-bottom: 1.25em; }

.prose :where(.prose > ol > li > :first-child):not(:where([class~=3D"not-pr=
ose"], [class~=3D"not-prose"] *)) { margin-top: 1.25em; }

.prose :where(.prose > ol > li > :last-child):not(:where([class~=3D"not-pro=
se"], [class~=3D"not-prose"] *)) { margin-bottom: 1.25em; }

.prose :where(ul ul, ul ol, ol ul, ol ol):not(:where([class~=3D"not-prose"]=
, [class~=3D"not-prose"] *)) { margin-bottom: 0.75em; margin-top: 0.75em; }

.prose :where(dl):not(:where([class~=3D"not-prose"], [class~=3D"not-prose"]=
 *)) { margin-bottom: 1.25em; margin-top: 1.25em; }

.prose :where(dd):not(:where([class~=3D"not-prose"], [class~=3D"not-prose"]=
 *)) { margin-top: 0.5em; padding-left: 1.625em; }

.prose :where(hr + *):not(:where([class~=3D"not-prose"], [class~=3D"not-pro=
se"] *)) { margin-top: 0px; }

.prose :where(h2 + *):not(:where([class~=3D"not-prose"], [class~=3D"not-pro=
se"] *)) { margin-top: 0px; }

.prose :where(h3 + *):not(:where([class~=3D"not-prose"], [class~=3D"not-pro=
se"] *)) { margin-top: 0px; }

.prose :where(h4 + *):not(:where([class~=3D"not-prose"], [class~=3D"not-pro=
se"] *)) { margin-top: 0px; }

.prose :where(thead th:first-child):not(:where([class~=3D"not-prose"], [cla=
ss~=3D"not-prose"] *)) { padding-left: 0px; }

.prose :where(thead th:last-child):not(:where([class~=3D"not-prose"], [clas=
s~=3D"not-prose"] *)) { padding-right: 0px; }

.prose :where(tbody td, tfoot td):not(:where([class~=3D"not-prose"], [class=
~=3D"not-prose"] *)) { padding: 0.571429em; }

.prose :where(tbody td:first-child, tfoot td:first-child):not(:where([class=
~=3D"not-prose"], [class~=3D"not-prose"] *)) { padding-left: 0px; }

.prose :where(tbody td:last-child, tfoot td:last-child):not(:where([class~=
=3D"not-prose"], [class~=3D"not-prose"] *)) { padding-right: 0px; }

.prose :where(figure):not(:where([class~=3D"not-prose"], [class~=3D"not-pro=
se"] *)) { margin-bottom: 2em; margin-top: 2em; }

.prose :where(.prose > :first-child):not(:where([class~=3D"not-prose"], [cl=
ass~=3D"not-prose"] *)) { margin-top: 0px; }

.prose :where(.prose > :last-child):not(:where([class~=3D"not-prose"], [cla=
ss~=3D"not-prose"] *)) { margin-bottom: 0px; }

.card-shadow { --tw-shadow: 0 2px 4px 2px rgba(0,0,0,.1),0 2px 4px -1px rgb=
a(0,0,0,.06); box-shadow: var(--tw-ring-offset-shadow,0 0 transparent),var(=
--tw-ring-shadow,0 0 transparent),var(--tw-shadow); }

.onload { display: initial !important; }

.hidden { display: none !important; }

#fetching-icon { height: 24px; overflow: visible; width: 24px; }

#filling-icon { overflow: visible; }

#filling-icon, .checkmark { height: 56px; max-height: 100%; max-width: 100%=
; width: 56px; }

.checkmark { border-radius: 50%; display: block; stroke-width: 2; stroke: r=
gb(255, 255, 255); stroke-miterlimit: 10; animation: 0.4s ease-in-out 0.4s =
1 normal forwards running fill, 0.3s ease-in-out 0.9s 1 normal both running=
 scale; box-shadow: rgb(62, 192, 222) 0px 0px 0px inset; }

.checkmark__circle { stroke-dasharray: 166; stroke-dashoffset: 166; stroke-=
width: 2; stroke-miterlimit: 10; stroke: rgb(62, 192, 222); fill: none; ani=
mation: 0.6s cubic-bezier(0.65, 0, 0.45, 1) 0s 1 normal forwards running st=
roke; }

.checkmark__check { transform-origin: 50% 50%; stroke-dasharray: 48; stroke=
-dashoffset: 48; animation: 0.3s cubic-bezier(0.65, 0, 0.45, 1) 0.8s 1 norm=
al forwards running stroke; }

.react-select__input > input:focus { --tw-ring-offset-shadow: var(--tw-ring=
-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color); --tw=
-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(var(--tw-ring-offset-width)) =
var(--tw-ring-color); box-shadow: var(--tw-ring-offset-shadow),var(--tw-rin=
g-shadow),var(--tw-shadow,0 0 #0000); }

.removeFormStyle input:focus { border-width: 0px; --tw-shadow: 0 0 #0000; -=
-tw-shadow-colored: 0 0 #0000; outline: transparent solid 2px; outline-offs=
et: 2px; --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-=
offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: var(--tw-ring-=
inset) 0 0 0 calc(var(--tw-ring-offset-width)) var(--tw-ring-color); box-sh=
adow: var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 =
0 #0000); }

@keyframes stroke {=20
  100% { stroke-dashoffset: 0; }
}

@keyframes scale {=20
  0%, 100% { transform: none; }
  50% { transform: scale3d(1.1, 1.1, 1); }
}

@keyframes fill {=20
  100% { box-shadow: rgb(62, 192, 222) 0px 0px 0px 30px inset; }
}

.sr-only { height: 1px; margin: -1px; overflow: hidden; padding: 0px; posit=
ion: absolute; width: 1px; clip: rect(0px, 0px, 0px, 0px); border-width: 0p=
x; white-space: nowrap; }

.pointer-events-none { pointer-events: none; }

.visible { visibility: visible; }

.invisible { visibility: hidden; }

.static { position: static; }

.fixed { position: fixed; }

.absolute { position: absolute; }

.relative { position: relative; }

.sticky { position: sticky; }

.inset-0 { inset: 0px; }

.inset-y-0 { bottom: 0px; top: 0px; }

.-bottom-\[23px\] { bottom: -23px; }

.-bottom-\[25px\] { bottom: -25px; }

.-left-\[23px\] { left: -23px; }

.-left-\[25px\] { left: -25px; }

.-right-\[23px\] { right: -23px; }

.-right-\[25px\] { right: -25px; }

.-top-\[120px\] { top: -120px; }

.-top-\[23px\] { top: -23px; }

.-top-\[25px\] { top: -25px; }

.bottom-0 { bottom: 0px; }

.bottom-16 { bottom: 64px; }

.bottom-2 { bottom: 8px; }

.bottom-2\.5 { bottom: 10px; }

.bottom-40 { bottom: 160px; }

.bottom-8 { bottom: 32px; }

.left-0 { left: 0px; }

.left-1 { left: 4px; }

.left-1\.5 { left: 6px; }

.left-1\/2 { left: 50%; }

.left-16 { left: 64px; }

.right-0 { right: 0px; }

.right-16 { right: 64px; }

.right-2 { right: 8px; }

.right-2\.5 { right: 10px; }

.right-\[440px\] { right: 440px; }

.top-0 { top: 0px; }

.top-1 { top: 4px; }

.top-1\.5 { top: 6px; }

.top-1\/2 { top: 50%; }

.top-16 { top: 64px; }

.top-2 { top: 8px; }

.top-36 { top: 144px; }

.top-4 { top: 16px; }

.top-48 { top: 192px; }

.top-8 { top: 32px; }

.top-80 { top: 320px; }

.isolate { isolation: isolate; }

.z-10 { z-index: 10; }

.z-50 { z-index: 50; }

.z-\[2147483646\] { z-index: 2147483646; }

.z-\[2147483647\] { z-index: 2147483647; }

.col-span-1 { grid-column: span 1 / span 1; }

.col-span-4 { grid-column: span 4 / span 4; }

.col-span-7 { grid-column: span 7 / span 7; }

.m-4 { margin: 16px; }

.m-auto { margin: auto; }

.-mx-1 { margin-left: -4px; margin-right: -4px; }

.-mx-1\.5 { margin-left: -6px; margin-right: -6px; }

.mx-1 { margin-left: 4px; margin-right: 4px; }

.mx-2 { margin-left: 8px; margin-right: 8px; }

.mx-4 { margin-left: 16px; margin-right: 16px; }

.mx-8 { margin-left: 32px; margin-right: 32px; }

.mx-auto { margin-left: auto; margin-right: auto; }

.my-0 { margin-bottom: 0px; margin-top: 0px; }

.my-0\.5 { margin-bottom: 2px; margin-top: 2px; }

.my-1 { margin-bottom: 4px; margin-top: 4px; }

.my-10 { margin-bottom: 40px; margin-top: 40px; }

.my-12 { margin-bottom: 48px; margin-top: 48px; }

.my-2 { margin-bottom: 8px; margin-top: 8px; }

.my-3 { margin-bottom: 12px; margin-top: 12px; }

.my-4 { margin-bottom: 16px; margin-top: 16px; }

.my-6 { margin-bottom: 24px; margin-top: 24px; }

.my-auto { margin-bottom: auto; margin-top: auto; }

.-mb-px { margin-bottom: -1px; }

.-ml-2 { margin-left: -8px; }

.-ml-6 { margin-left: -24px; }

.-mr-2 { margin-right: -8px; }

.-mr-6 { margin-right: -24px; }

.-mt-1 { margin-top: -4px; }

.-mt-2 { margin-top: -8px; }

.mb-1 { margin-bottom: 4px; }

.mb-16 { margin-bottom: 64px; }

.mb-2 { margin-bottom: 8px; }

.mb-3 { margin-bottom: 12px; }

.mb-4 { margin-bottom: 16px; }

.mb-6 { margin-bottom: 24px; }

.mb-8 { margin-bottom: 32px; }

.ml-1 { margin-left: 4px; }

.ml-12 { margin-left: 48px; }

.ml-2 { margin-left: 8px; }

.ml-4 { margin-left: 16px; }

.ml-40 { margin-left: 160px; }

.ml-5 { margin-left: 20px; }

.ml-8 { margin-left: 32px; }

.ml-\[12px\] { margin-left: 12px; }

.ml-auto { margin-left: auto; }

.mr-0 { margin-right: 0px; }

.mr-0\.5 { margin-right: 2px; }

.mr-1 { margin-right: 4px; }

.mr-2 { margin-right: 8px; }

.mr-32 { margin-right: 128px; }

.mr-4 { margin-right: 16px; }

.mr-\[0\.75em\] { margin-right: 0.75em; }

.mr-auto { margin-right: auto; }

.mt-0 { margin-top: 0px; }

.mt-0\.5 { margin-top: 2px; }

.mt-1 { margin-top: 4px; }

.mt-1\.5 { margin-top: 6px; }

.mt-2 { margin-top: 8px; }

.mt-2\.5 { margin-top: 10px; }

.mt-3 { margin-top: 12px; }

.mt-4 { margin-top: 16px; }

.mt-5 { margin-top: 20px; }

.mt-6 { margin-top: 24px; }

.mt-60 { margin-top: 240px; }

.mt-8 { margin-top: 32px; }

.line-clamp-1 { -webkit-line-clamp: 1; }

.line-clamp-1, .line-clamp-2 { display: -webkit-box; overflow: hidden; -web=
kit-box-orient: vertical; }

.line-clamp-2 { -webkit-line-clamp: 2; }

.line-clamp-3 { display: -webkit-box; overflow: hidden; -webkit-box-orient:=
 vertical; -webkit-line-clamp: 3; }

.block { display: block; }

.inline-block { display: inline-block; }

.inline { display: inline; }

.flex { display: flex; }

.inline-flex { display: inline-flex; }

.table { display: table; }

.grid { display: grid; }

.contents { display: contents; }

.hidden { display: none; }

.size-4 { height: 16px; width: 16px; }

.size-5 { height: 20px; width: 20px; }

.size-8 { height: 32px; width: 32px; }

.h-0 { height: 0px; }

.h-1 { height: 4px; }

.h-1\.5 { height: 6px; }

.h-10 { height: 40px; }

.h-12 { height: 48px; }

.h-14 { height: 56px; }

.h-16 { height: 64px; }

.h-2 { height: 8px; }

.h-2\.5 { height: 10px; }

.h-20 { height: 80px; }

.h-28 { height: 112px; }

.h-3 { height: 12px; }

.h-32 { height: 128px; }

.h-4 { height: 16px; }

.h-40 { height: 160px; }

.h-5 { height: 20px; }

.h-56 { height: 224px; }

.h-6 { height: 24px; }

.h-7 { height: 28px; }

.h-8 { height: 32px; }

.h-9 { height: 36px; }

.h-\[21px\] { height: 21px; }

.h-\[34px\] { height: 34px; }

.h-\[40px\] { height: 40px; }

.h-\[44px\] { height: 44px; }

.h-\[45px\] { height: 45px; }

.h-\[48px\] { height: 48px; }

.h-\[600px\] { height: 600px; }

.h-full { height: 100%; }

.h-screen { height: 100vh; }

.max-h-0 { max-height: 0px; }

.max-h-72 { max-height: 288px; }

.max-h-\[calc\(100vh-300px\)\] { max-height: calc(-300px + 100vh); }

.max-h-\[calc\(100vh-32px\)\] { max-height: calc(-32px + 100vh); }

.max-h-\[inherit\] { max-height: inherit; }

.max-h-full { max-height: 100%; }

.min-h-\[140px\] { min-height: 140px; }

.min-h-\[280px\] { min-height: 280px; }

.min-h-\[34px\] { min-height: 34px; }

.min-h-\[600px\] { min-height: 600px; }

.min-h-\[90px\] { min-height: 90px; }

.w-0 { width: 0px; }

.w-1 { width: 4px; }

.w-1\.5 { width: 6px; }

.w-1\/2 { width: 50%; }

.w-1\/3 { width: 33.3333%; }

.w-10 { width: 40px; }

.w-12 { width: 48px; }

.w-14 { width: 56px; }

.w-2 { width: 8px; }

.w-2\.5 { width: 10px; }

.w-20 { width: 80px; }

.w-3 { width: 12px; }

.w-4 { width: 16px; }

.w-44 { width: 176px; }

.w-5 { width: 20px; }

.w-6 { width: 24px; }

.w-7 { width: 28px; }

.w-72 { width: 288px; }

.w-8 { width: 32px; }

.w-\[334px\] { width: 334px; }

.w-\[350px\] { width: 350px; }

.w-auto { width: auto; }

.w-fit { width: fit-content; }

.w-full { width: 100%; }

.w-min { width: min-content; }

.w-px { width: 1px; }

.min-w-\[704px\] { min-width: 704px; }

.max-w-2xl { max-width: 672px; }

.max-w-2xs { max-width: 300px; }

.max-w-3xl { max-width: 768px; }

.max-w-\[1024px\] { max-width: 1024px; }

.max-w-\[640px\] { max-width: 640px; }

.max-w-lg { max-width: 512px; }

.max-w-md { max-width: 448px; }

.max-w-sm { max-width: 384px; }

.max-w-xl { max-width: 576px; }

.max-w-xs { max-width: 320px; }

.flex-1 { flex: 1 1 0%; }

.flex-none { flex: 0 0 auto; }

.flex-shrink-0, .shrink-0 { flex-shrink: 0; }

.flex-grow, .grow { flex-grow: 1; }

.-translate-y-1\/2 { --tw-translate-y: -50%; }

.-translate-y-1\/2, .translate-x-0 { transform: translate(var(--tw-translat=
e-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)=
) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y=
)); }

.translate-x-0 { --tw-translate-x: 0; }

.translate-x-full { --tw-translate-x: 100%; }

.translate-x-full, .translate-y-0 { transform: translate(var(--tw-translate=
-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x))=
 skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)=
); }

.translate-y-0 { --tw-translate-y: 0; }

.translate-y-4 { --tw-translate-y: 16px; }

.rotate-90, .translate-y-4 { transform: translate(var(--tw-translate-x),var=
(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(=
var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

.rotate-90 { --tw-rotate: 90deg; }

.transform { transform: translate(var(--tw-translate-x),var(--tw-translate-=
y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)=
) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y)); }

@keyframes spin {=20
  100% { transform: rotate(1turn); }
}

.animate-spin { animation: 1s linear 0s infinite normal none running spin; =
}

.cursor-default { cursor: default; }

.cursor-not-allowed { cursor: not-allowed; }

.cursor-pointer { cursor: pointer; }

.select-none { user-select: none; }

.resize-none { resize: none; }

.resize { resize: both; }

.list-decimal { list-style-type: decimal; }

.list-disc { list-style-type: disc; }

.grid-cols-1 { grid-template-columns: repeat(1, minmax(0px, 1fr)); }

.grid-cols-2 { grid-template-columns: repeat(2, minmax(0px, 1fr)); }

.grid-cols-5 { grid-template-columns: repeat(5, minmax(0px, 1fr)); }

.grid-cols-8 { grid-template-columns: repeat(8, minmax(0px, 1fr)); }

.grid-cols-9 { grid-template-columns: repeat(9, minmax(0px, 1fr)); }

.flex-row { flex-direction: row; }

.flex-row-reverse { flex-direction: row-reverse; }

.flex-col { flex-direction: column; }

.flex-wrap { flex-wrap: wrap; }

.flex-nowrap { flex-wrap: nowrap; }

.items-start { align-items: flex-start; }

.items-end { align-items: flex-end; }

.items-center { align-items: center; }

.items-baseline { align-items: baseline; }

.items-stretch { align-items: stretch; }

.justify-start { justify-content: flex-start; }

.justify-end { justify-content: flex-end; }

.justify-center { justify-content: center; }

.justify-between { justify-content: space-between; }

.justify-around { justify-content: space-around; }

.gap-1 { gap: 4px; }

.gap-2 { gap: 8px; }

.gap-4 { gap: 16px; }

.gap-x-4 { column-gap: 16px; }

.space-x-1 > :not([hidden]) ~ :not([hidden]) { --tw-space-x-reverse: 0; mar=
gin-left: calc(4px*(1 - var(--tw-space-x-reverse))); margin-right: calc(4px=
*var(--tw-space-x-reverse)); }

.space-x-2 > :not([hidden]) ~ :not([hidden]) { --tw-space-x-reverse: 0; mar=
gin-left: calc(8px*(1 - var(--tw-space-x-reverse))); margin-right: calc(8px=
*var(--tw-space-x-reverse)); }

.space-x-8 > :not([hidden]) ~ :not([hidden]) { --tw-space-x-reverse: 0; mar=
gin-left: calc(32px*(1 - var(--tw-space-x-reverse))); margin-right: calc(32=
px*var(--tw-space-x-reverse)); }

.divide-x > :not([hidden]) ~ :not([hidden]) { --tw-divide-x-reverse: 0; bor=
der-left-width: calc(1px*(1 - var(--tw-divide-x-reverse))); border-right-wi=
dth: calc(1px*var(--tw-divide-x-reverse)); }

.divide-y > :not([hidden]) ~ :not([hidden]) { --tw-divide-y-reverse: 0; bor=
der-bottom-width: calc(1px*var(--tw-divide-y-reverse)); border-top-width: c=
alc(1px*(1 - var(--tw-divide-y-reverse))); }

.self-start { align-self: flex-start; }

.overflow-auto { overflow: auto; }

.overflow-hidden { overflow: hidden; }

.overflow-visible { overflow: visible; }

.overflow-x-auto { overflow-x: auto; }

.overflow-y-auto { overflow-y: auto; }

.overflow-x-hidden { overflow-x: hidden; }

.truncate { overflow: hidden; text-overflow: ellipsis; }

.truncate, .whitespace-nowrap { white-space: nowrap; }

.whitespace-pre-wrap { white-space: pre-wrap; }

.rounded { border-radius: 0.25rem; }

.rounded-2xl { border-radius: 1rem; }

.rounded-full { border-radius: 9999px; }

.rounded-lg { border-radius: 0.5rem; }

.rounded-md { border-radius: 0.375rem; }

.rounded-sm { border-radius: 0.125rem; }

.rounded-xl { border-radius: 0.75rem; }

.rounded-l-md { border-bottom-left-radius: 0.375rem; border-top-left-radius=
: 0.375rem; }

.rounded-r-sm { border-bottom-right-radius: 0.125rem; border-top-right-radi=
us: 0.125rem; }

.border { border-width: 1px; }

.border-\[12px\] { border-width: 12px; }

.border-y { border-top-width: 1px; }

.border-b, .border-y { border-bottom-width: 1px; }

.border-b-2 { border-bottom-width: 2px; }

.border-l { border-left-width: 1px; }

.border-r { border-right-width: 1px; }

.border-t { border-top-width: 1px; }

.border-solid { border-style: solid; }

.border-none { border-style: none; }

.border-black { --tw-border-opacity: 1; border-color: rgb(0 0 0/var(--tw-bo=
rder-opacity)); }

.border-gray-100 { --tw-border-opacity: 1; border-color: rgb(243 244 246/va=
r(--tw-border-opacity)); }

.border-gray-200 { --tw-border-opacity: 1; border-color: rgb(229 231 235/va=
r(--tw-border-opacity)); }

.border-gray-300 { --tw-border-opacity: 1; border-color: rgb(209 213 219/va=
r(--tw-border-opacity)); }

.border-gray-500 { --tw-border-opacity: 1; border-color: rgb(107 114 128/va=
r(--tw-border-opacity)); }

.border-primary-dark { --tw-border-opacity: 1; border-color: rgb(18 161 192=
/var(--tw-border-opacity)); }

.border-slate-200 { --tw-border-opacity: 1; border-color: rgb(226 232 240/v=
ar(--tw-border-opacity)); }

.border-stone-200 { --tw-border-opacity: 1; border-color: rgb(231 229 228/v=
ar(--tw-border-opacity)); }

.border-transparent { border-color: transparent; }

.border-yellow-300 { --tw-border-opacity: 1; border-color: rgb(253 224 71/v=
ar(--tw-border-opacity)); }

.border-b-gray-900 { --tw-border-opacity: 1; border-bottom-color: rgb(17 24=
 39/var(--tw-border-opacity)); }

.border-b-white { --tw-border-opacity: 1; border-bottom-color: rgb(255 255 =
255/var(--tw-border-opacity)); }

.border-l-gray-900 { --tw-border-opacity: 1; border-left-color: rgb(17 24 3=
9/var(--tw-border-opacity)); }

.border-l-white { --tw-border-opacity: 1; border-left-color: rgb(255 255 25=
5/var(--tw-border-opacity)); }

.border-r-gray-900 { --tw-border-opacity: 1; border-right-color: rgb(17 24 =
39/var(--tw-border-opacity)); }

.border-r-white { --tw-border-opacity: 1; border-right-color: rgb(255 255 2=
55/var(--tw-border-opacity)); }

.border-t-gray-900 { --tw-border-opacity: 1; border-top-color: rgb(17 24 39=
/var(--tw-border-opacity)); }

.border-t-white { --tw-border-opacity: 1; border-top-color: rgb(255 255 255=
/var(--tw-border-opacity)); }

.bg-amber-500 { --tw-bg-opacity: 1; background-color: rgb(245 158 11/var(--=
tw-bg-opacity)); }

.bg-black { --tw-bg-opacity: 1; background-color: rgb(0 0 0/var(--tw-bg-opa=
city)); }

.bg-blue-500 { --tw-bg-opacity: 1; background-color: rgb(59 130 246/var(--t=
w-bg-opacity)); }

.bg-cyan-500 { --tw-bg-opacity: 1; background-color: rgb(6 182 212/var(--tw=
-bg-opacity)); }

.bg-cyan-600 { --tw-bg-opacity: 1; background-color: rgb(8 145 178/var(--tw=
-bg-opacity)); }

.bg-emerald-500 { --tw-bg-opacity: 1; background-color: rgb(16 185 129/var(=
--tw-bg-opacity)); }

.bg-fuchsia-500 { --tw-bg-opacity: 1; background-color: rgb(217 70 239/var(=
--tw-bg-opacity)); }

.bg-gray-100 { --tw-bg-opacity: 1; background-color: rgb(243 244 246/var(--=
tw-bg-opacity)); }

.bg-gray-200 { --tw-bg-opacity: 1; background-color: rgb(229 231 235/var(--=
tw-bg-opacity)); }

.bg-gray-300 { --tw-bg-opacity: 1; background-color: rgb(209 213 219/var(--=
tw-bg-opacity)); }

.bg-gray-500 { --tw-bg-opacity: 1; background-color: rgb(107 114 128/var(--=
tw-bg-opacity)); }

.bg-gray-500\/75 { background-color: rgba(107, 114, 128, 0.75); }

.bg-gray-600 { --tw-bg-opacity: 1; background-color: rgb(75 85 99/var(--tw-=
bg-opacity)); }

.bg-green-100 { --tw-bg-opacity: 1; background-color: rgb(220 252 231/var(-=
-tw-bg-opacity)); }

.bg-green-500 { --tw-bg-opacity: 1; background-color: rgb(34 197 94/var(--t=
w-bg-opacity)); }

.bg-green-600 { --tw-bg-opacity: 1; background-color: rgb(22 163 74/var(--t=
w-bg-opacity)); }

.bg-indigo-500 { --tw-bg-opacity: 1; background-color: rgb(99 102 241/var(-=
-tw-bg-opacity)); }

.bg-lime-500 { --tw-bg-opacity: 1; background-color: rgb(132 204 22/var(--t=
w-bg-opacity)); }

.bg-orange-500 { --tw-bg-opacity: 1; background-color: rgb(249 115 22/var(-=
-tw-bg-opacity)); }

.bg-pink-100 { --tw-bg-opacity: 1; background-color: rgb(252 231 243/var(--=
tw-bg-opacity)); }

.bg-pink-500 { --tw-bg-opacity: 1; background-color: rgb(236 72 153/var(--t=
w-bg-opacity)); }

.bg-primary-base { --tw-bg-opacity: 1; background-color: rgb(62 192 222/var=
(--tw-bg-opacity)); }

.bg-primary-dark { --tw-bg-opacity: 1; background-color: rgb(18 161 192/var=
(--tw-bg-opacity)); }

.bg-primary-darkest { --tw-bg-opacity: 1; background-color: rgb(10 136 164/=
var(--tw-bg-opacity)); }

.bg-primary-light { --tw-bg-opacity: 1; background-color: rgb(223 249 255/v=
ar(--tw-bg-opacity)); }

.bg-primary-medium { --tw-bg-opacity: 1; background-color: rgb(204 246 255/=
var(--tw-bg-opacity)); }

.bg-purple-500 { --tw-bg-opacity: 1; background-color: rgb(168 85 247/var(-=
-tw-bg-opacity)); }

.bg-red-100 { --tw-bg-opacity: 1; background-color: rgb(254 226 226/var(--t=
w-bg-opacity)); }

.bg-red-400 { --tw-bg-opacity: 1; background-color: rgb(248 113 113/var(--t=
w-bg-opacity)); }

.bg-red-500 { --tw-bg-opacity: 1; background-color: rgb(239 68 68/var(--tw-=
bg-opacity)); }

.bg-red-600 { --tw-bg-opacity: 1; background-color: rgb(220 38 38/var(--tw-=
bg-opacity)); }

.bg-rose-500 { --tw-bg-opacity: 1; background-color: rgb(244 63 94/var(--tw=
-bg-opacity)); }

.bg-sky-100 { --tw-bg-opacity: 1; background-color: rgb(224 242 254/var(--t=
w-bg-opacity)); }

.bg-sky-500 { --tw-bg-opacity: 1; background-color: rgb(14 165 233/var(--tw=
-bg-opacity)); }

.bg-slate-200 { --tw-bg-opacity: 1; background-color: rgb(226 232 240/var(-=
-tw-bg-opacity)); }

.bg-slate-300 { --tw-bg-opacity: 1; background-color: rgb(203 213 225/var(-=
-tw-bg-opacity)); }

.bg-slate-50 { --tw-bg-opacity: 1; background-color: rgb(248 250 252/var(--=
tw-bg-opacity)); }

.bg-stone-50 { --tw-bg-opacity: 1; background-color: rgb(250 250 249/var(--=
tw-bg-opacity)); }

.bg-teal-500 { --tw-bg-opacity: 1; background-color: rgb(20 184 166/var(--t=
w-bg-opacity)); }

.bg-transparent { background-color: transparent; }

.bg-violet-500 { --tw-bg-opacity: 1; background-color: rgb(139 92 246/var(-=
-tw-bg-opacity)); }

.bg-white { --tw-bg-opacity: 1; background-color: rgb(255 255 255/var(--tw-=
bg-opacity)); }

.bg-yellow-100 { --tw-bg-opacity: 1; background-color: rgb(254 249 195/var(=
--tw-bg-opacity)); }

.bg-yellow-500 { --tw-bg-opacity: 1; background-color: rgb(234 179 8/var(--=
tw-bg-opacity)); }

.bg-hero-pattern { background-image: url("https://res.cloudinary.com/dpeo4x=
cnc/image/upload/v1632483912/images/new_hero.svg"); }

.bg-contain-small { background-size: 4rem; }

.bg-right-4 { background-position: right 1rem center; }

.bg-no-repeat { background-repeat: no-repeat; }

.object-contain { object-fit: contain; }

.object-center { object-position: center center; }

.p-0 { padding: 0px; }

.p-0\.5 { padding: 2px; }

.p-1 { padding: 4px; }

.p-1\.5 { padding: 6px; }

.p-16 { padding: 64px; }

.p-2 { padding: 8px; }

.p-3 { padding: 12px; }

.p-4 { padding: 16px; }

.p-6 { padding: 24px; }

.px-1 { padding-left: 4px; padding-right: 4px; }

.px-1\.5 { padding-left: 6px; padding-right: 6px; }

.px-2 { padding-left: 8px; padding-right: 8px; }

.px-2\.5 { padding-left: 10px; padding-right: 10px; }

.px-3 { padding-left: 12px; padding-right: 12px; }

.px-4 { padding-left: 16px; padding-right: 16px; }

.px-5 { padding-left: 20px; padding-right: 20px; }

.px-6 { padding-left: 24px; padding-right: 24px; }

.px-8 { padding-left: 32px; padding-right: 32px; }

.py-0 { padding-bottom: 0px; padding-top: 0px; }

.py-0\.5 { padding-bottom: 2px; padding-top: 2px; }

.py-1 { padding-bottom: 4px; padding-top: 4px; }

.py-1\.5 { padding-bottom: 6px; padding-top: 6px; }

.py-2 { padding-bottom: 8px; padding-top: 8px; }

.py-3 { padding-bottom: 12px; padding-top: 12px; }

.py-4 { padding-bottom: 16px; padding-top: 16px; }

.py-5 { padding-bottom: 20px; padding-top: 20px; }

.pb-0 { padding-bottom: 0px; }

.pb-0\.5 { padding-bottom: 2px; }

.pb-2 { padding-bottom: 8px; }

.pb-3 { padding-bottom: 12px; }

.pb-4 { padding-bottom: 16px; }

.pl-1 { padding-left: 4px; }

.pl-10 { padding-left: 40px; }

.pl-2 { padding-left: 8px; }

.pl-2\.5 { padding-left: 10px; }

.pl-3 { padding-left: 12px; }

.pl-5 { padding-left: 20px; }

.pl-6 { padding-left: 24px; }

.pr-1 { padding-right: 4px; }

.pr-2 { padding-right: 8px; }

.pr-3 { padding-right: 12px; }

.pr-4 { padding-right: 16px; }

.pr-6 { padding-right: 24px; }

.pt-0 { padding-top: 0px; }

.pt-2 { padding-top: 8px; }

.pt-4 { padding-top: 16px; }

.pt-6 { padding-top: 24px; }

.pt-8 { padding-top: 32px; }

.text-left { text-align: left; }

.text-center { text-align: center; }

.align-baseline { vertical-align: baseline; }

.align-middle { vertical-align: middle; }

.align-bottom { vertical-align: bottom; }

.font-sans { font-family: Palanquin, ui-sans-serif, system-ui, sans-serif, =
"Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji=
"; }

.text-2xl { font-size: 24px; }

.text-2xs { font-size: 10px; }

.text-3xl { font-size: 30px; }

.text-4xl { font-size: 36px; }

.text-base { font-size: 16px; }

.text-lg { font-size: 18px; }

.text-sm { font-size: 14px; }

.text-xl { font-size: 20px; }

.text-xs { font-size: 12px; }

.font-black { font-weight: 900; }

.font-bold { font-weight: 700; }

.font-medium { font-weight: 500; }

.font-normal { font-weight: 400; }

.font-semibold { font-weight: 600; }

.uppercase { text-transform: uppercase; }

.italic { font-style: italic; }

.leading-4 { line-height: 16px; }

.leading-5 { line-height: 20px; }

.leading-6 { line-height: 24px; }

.leading-\[21px\] { line-height: 21px; }

.leading-none { line-height: 1; }

.leading-normal { line-height: 1.5; }

.leading-tight { line-height: 1.25; }

.text-amber-500 { --tw-text-opacity: 1; color: rgb(245 158 11/var(--tw-text=
-opacity)); }

.text-black { --tw-text-opacity: 1; color: rgb(0 0 0/var(--tw-text-opacity)=
); }

.text-blue-500 { --tw-text-opacity: 1; color: rgb(59 130 246/var(--tw-text-=
opacity)); }

.text-cyan-500 { --tw-text-opacity: 1; color: rgb(6 182 212/var(--tw-text-o=
pacity)); }

.text-cyan-600 { --tw-text-opacity: 1; color: rgb(8 145 178/var(--tw-text-o=
pacity)); }

.text-emerald-500 { --tw-text-opacity: 1; color: rgb(16 185 129/var(--tw-te=
xt-opacity)); }

.text-fuchsia-500 { --tw-text-opacity: 1; color: rgb(217 70 239/var(--tw-te=
xt-opacity)); }

.text-gray-300 { --tw-text-opacity: 1; color: rgb(209 213 219/var(--tw-text=
-opacity)); }

.text-gray-400 { --tw-text-opacity: 1; color: rgb(156 163 175/var(--tw-text=
-opacity)); }

.text-gray-500 { --tw-text-opacity: 1; color: rgb(107 114 128/var(--tw-text=
-opacity)); }

.text-gray-600 { --tw-text-opacity: 1; color: rgb(75 85 99/var(--tw-text-op=
acity)); }

.text-gray-700 { --tw-text-opacity: 1; color: rgb(55 65 81/var(--tw-text-op=
acity)); }

.text-gray-800 { --tw-text-opacity: 1; color: rgb(31 41 55/var(--tw-text-op=
acity)); }

.text-gray-900 { --tw-text-opacity: 1; color: rgb(17 24 39/var(--tw-text-op=
acity)); }

.text-green-500 { --tw-text-opacity: 1; color: rgb(34 197 94/var(--tw-text-=
opacity)); }

.text-green-600 { --tw-text-opacity: 1; color: rgb(22 163 74/var(--tw-text-=
opacity)); }

.text-green-700 { --tw-text-opacity: 1; color: rgb(21 128 61/var(--tw-text-=
opacity)); }

.text-indigo-500 { --tw-text-opacity: 1; color: rgb(99 102 241/var(--tw-tex=
t-opacity)); }

.text-lime-500 { --tw-text-opacity: 1; color: rgb(132 204 22/var(--tw-text-=
opacity)); }

.text-orange-500 { --tw-text-opacity: 1; color: rgb(249 115 22/var(--tw-tex=
t-opacity)); }

.text-pink-500 { --tw-text-opacity: 1; color: rgb(236 72 153/var(--tw-text-=
opacity)); }

.text-pink-800 { --tw-text-opacity: 1; color: rgb(157 23 77/var(--tw-text-o=
pacity)); }

.text-primary-base { --tw-text-opacity: 1; color: rgb(62 192 222/var(--tw-t=
ext-opacity)); }

.text-primary-dark { --tw-text-opacity: 1; color: rgb(18 161 192/var(--tw-t=
ext-opacity)); }

.text-primary-darkest { --tw-text-opacity: 1; color: rgb(10 136 164/var(--t=
w-text-opacity)); }

.text-purple-500 { --tw-text-opacity: 1; color: rgb(168 85 247/var(--tw-tex=
t-opacity)); }

.text-red-500 { --tw-text-opacity: 1; color: rgb(239 68 68/var(--tw-text-op=
acity)); }

.text-red-600 { --tw-text-opacity: 1; color: rgb(220 38 38/var(--tw-text-op=
acity)); }

.text-rose-500 { --tw-text-opacity: 1; color: rgb(244 63 94/var(--tw-text-o=
pacity)); }

.text-sky-500 { --tw-text-opacity: 1; color: rgb(14 165 233/var(--tw-text-o=
pacity)); }

.text-slate-300 { --tw-text-opacity: 1; color: rgb(203 213 225/var(--tw-tex=
t-opacity)); }

.text-slate-400 { --tw-text-opacity: 1; color: rgb(148 163 184/var(--tw-tex=
t-opacity)); }

.text-slate-700 { --tw-text-opacity: 1; color: rgb(51 65 85/var(--tw-text-o=
pacity)); }

.text-slate-900 { --tw-text-opacity: 1; color: rgb(15 23 42/var(--tw-text-o=
pacity)); }

.text-stone-600 { --tw-text-opacity: 1; color: rgb(87 83 78/var(--tw-text-o=
pacity)); }

.text-teal-500 { --tw-text-opacity: 1; color: rgb(20 184 166/var(--tw-text-=
opacity)); }

.text-violet-500 { --tw-text-opacity: 1; color: rgb(139 92 246/var(--tw-tex=
t-opacity)); }

.text-white { --tw-text-opacity: 1; color: rgb(255 255 255/var(--tw-text-op=
acity)); }

.text-yellow-500 { --tw-text-opacity: 1; color: rgb(234 179 8/var(--tw-text=
-opacity)); }

.text-yellow-700 { --tw-text-opacity: 1; color: rgb(161 98 7/var(--tw-text-=
opacity)); }

.text-opacity-0 { --tw-text-opacity: 0; }

.underline { text-decoration-line: underline; }

.line-through { text-decoration-line: line-through; }

.opacity-0 { opacity: 0; }

.opacity-100 { opacity: 1; }

.opacity-25 { opacity: 0.25; }

.opacity-5 { opacity: 0.05; }

.opacity-50 { opacity: 0.5; }

.opacity-75 { opacity: 0.75; }

.shadow { --tw-shadow: 0 1px 3px 0 rgba(0,0,0,.1),0 1px 2px -1px rgba(0,0,0=
,.1); --tw-shadow-colored: 0 1px 3px 0 var(--tw-shadow-color),0 1px 2px -1p=
x var(--tw-shadow-color); }

.shadow, .shadow-lg { box-shadow: var(--tw-ring-offset-shadow,0 0 #0000),va=
r(--tw-ring-shadow,0 0 #0000),var(--tw-shadow); }

.shadow-lg { --tw-shadow: 0 10px 15px -3px rgba(0,0,0,.1),0 4px 6px -4px rg=
ba(0,0,0,.1); --tw-shadow-colored: 0 10px 15px -3px var(--tw-shadow-color),=
0 4px 6px -4px var(--tw-shadow-color); }

.shadow-md { --tw-shadow: 0 4px 6px -1px rgba(0,0,0,.1),0 2px 4px -2px rgba=
(0,0,0,.1); --tw-shadow-colored: 0 4px 6px -1px var(--tw-shadow-color),0 2p=
x 4px -2px var(--tw-shadow-color); }

.shadow-md, .shadow-sm { box-shadow: var(--tw-ring-offset-shadow,0 0 #0000)=
,var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow); }

.shadow-sm { --tw-shadow: 0 1px 2px 0 rgba(0,0,0,.05); --tw-shadow-colored:=
 0 1px 2px 0 var(--tw-shadow-color); }

.shadow-xl { --tw-shadow: 0 20px 25px -5px rgba(0,0,0,.1),0 8px 10px -6px r=
gba(0,0,0,.1); --tw-shadow-colored: 0 20px 25px -5px var(--tw-shadow-color)=
,0 8px 10px -6px var(--tw-shadow-color); box-shadow: var(--tw-ring-offset-s=
hadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow); }

.outline { outline-style: solid; }

.ring { --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-o=
ffset-width) var(--tw-ring-offset-color); --tw-ring-shadow: var(--tw-ring-i=
nset) 0 0 0 calc(3px + var(--tw-ring-offset-width)) var(--tw-ring-color); b=
ox-shadow: var(--tw-ring-offset-shadow),var(--tw-ring-shadow),var(--tw-shad=
ow,0 0 #0000); }

.blur { --tw-blur: blur(8px); }

.blur, .filter { filter: var(--tw-blur) var(--tw-brightness) var(--tw-contr=
ast) var(--tw-grayscale) var(--tw-hue-rotate) var(--tw-invert) var(--tw-sat=
urate) var(--tw-sepia) var(--tw-drop-shadow); }

.transition { transition-duration: 0.15s; transition-property: color, backg=
round-color, border-color, text-decoration-color, fill, stroke, opacity, bo=
x-shadow, transform, filter, backdrop-filter, -webkit-backdrop-filter; tran=
sition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); }

.transition-all { transition-duration: 0.15s; transition-property: all; tra=
nsition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); }

.transition-colors { transition-duration: 0.15s; transition-property: color=
, background-color, border-color, text-decoration-color, fill, stroke; tran=
sition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); }

.transition-opacity { transition-property: opacity; transition-timing-funct=
ion: cubic-bezier(0.4, 0, 0.2, 1); }

.duration-150, .transition-opacity { transition-duration: 0.15s; }

.duration-200 { transition-duration: 0.2s; }

.duration-300 { transition-duration: 0.3s; }

.duration-500 { transition-duration: 0.5s; }

.ease-in { transition-timing-function: cubic-bezier(0.4, 0, 1, 1); }

.ease-in-out { transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1); }

.ease-out { transition-timing-function: cubic-bezier(0, 0, 0.2, 1); }

.no-scrollbar::-webkit-scrollbar { display: none; }

.no-scrollbar { overflow-y: scroll; scrollbar-width: none; }

.focus-within\:z-10:focus-within { z-index: 10; }

.hover\:-translate-y-1:hover { --tw-translate-y: -4px; transform: translate=
(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skew=
X(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scale=
Y(var(--tw-scale-y)); }

.hover\:border-gray-300:hover { --tw-border-opacity: 1; border-color: rgb(2=
09 213 219/var(--tw-border-opacity)); }

.hover\:border-gray-400:hover { --tw-border-opacity: 1; border-color: rgb(1=
56 163 175/var(--tw-border-opacity)); }

.hover\:border-stone-600:hover { --tw-border-opacity: 1; border-color: rgb(=
87 83 78/var(--tw-border-opacity)); }

.hover\:bg-amber-100:hover { --tw-bg-opacity: 1; background-color: rgb(254 =
243 199/var(--tw-bg-opacity)); }

.hover\:bg-blue-100:hover { --tw-bg-opacity: 1; background-color: rgb(219 2=
34 254/var(--tw-bg-opacity)); }

.hover\:bg-cyan-100:hover { --tw-bg-opacity: 1; background-color: rgb(207 2=
50 254/var(--tw-bg-opacity)); }

.hover\:bg-emerald-100:hover { --tw-bg-opacity: 1; background-color: rgb(20=
9 250 229/var(--tw-bg-opacity)); }

.hover\:bg-fuchsia-100:hover { --tw-bg-opacity: 1; background-color: rgb(25=
0 232 255/var(--tw-bg-opacity)); }

.hover\:bg-gray-100:hover { --tw-bg-opacity: 1; background-color: rgb(243 2=
44 246/var(--tw-bg-opacity)); }

.hover\:bg-gray-300:hover { --tw-bg-opacity: 1; background-color: rgb(209 2=
13 219/var(--tw-bg-opacity)); }

.hover\:bg-gray-50:hover { --tw-bg-opacity: 1; background-color: rgb(249 25=
0 251/var(--tw-bg-opacity)); }

.hover\:bg-gray-500:hover { --tw-bg-opacity: 1; background-color: rgb(107 1=
14 128/var(--tw-bg-opacity)); }

.hover\:bg-green-100:hover { --tw-bg-opacity: 1; background-color: rgb(220 =
252 231/var(--tw-bg-opacity)); }

.hover\:bg-green-500:hover { --tw-bg-opacity: 1; background-color: rgb(34 1=
97 94/var(--tw-bg-opacity)); }

.hover\:bg-indigo-100:hover { --tw-bg-opacity: 1; background-color: rgb(224=
 231 255/var(--tw-bg-opacity)); }

.hover\:bg-lime-100:hover { --tw-bg-opacity: 1; background-color: rgb(236 2=
52 203/var(--tw-bg-opacity)); }

.hover\:bg-orange-100:hover { --tw-bg-opacity: 1; background-color: rgb(255=
 237 213/var(--tw-bg-opacity)); }

.hover\:bg-pink-100:hover { --tw-bg-opacity: 1; background-color: rgb(252 2=
31 243/var(--tw-bg-opacity)); }

.hover\:bg-primary-base:hover { --tw-bg-opacity: 1; background-color: rgb(6=
2 192 222/var(--tw-bg-opacity)); }

.hover\:bg-primary-dark:hover { --tw-bg-opacity: 1; background-color: rgb(1=
8 161 192/var(--tw-bg-opacity)); }

.hover\:bg-primary-light:hover { --tw-bg-opacity: 1; background-color: rgb(=
223 249 255/var(--tw-bg-opacity)); }

.hover\:bg-primary-lightest:hover { --tw-bg-opacity: 1; background-color: r=
gb(240 252 255/var(--tw-bg-opacity)); }

.hover\:bg-primary-medium:hover { --tw-bg-opacity: 1; background-color: rgb=
(204 246 255/var(--tw-bg-opacity)); }

.hover\:bg-purple-100:hover { --tw-bg-opacity: 1; background-color: rgb(243=
 232 255/var(--tw-bg-opacity)); }

.hover\:bg-red-100:hover { --tw-bg-opacity: 1; background-color: rgb(254 22=
6 226/var(--tw-bg-opacity)); }

.hover\:bg-red-200:hover { --tw-bg-opacity: 1; background-color: rgb(254 20=
2 202/var(--tw-bg-opacity)); }

.hover\:bg-red-500:hover { --tw-bg-opacity: 1; background-color: rgb(239 68=
 68/var(--tw-bg-opacity)); }

.hover\:bg-rose-100:hover { --tw-bg-opacity: 1; background-color: rgb(255 2=
28 230/var(--tw-bg-opacity)); }

.hover\:bg-sky-100:hover { --tw-bg-opacity: 1; background-color: rgb(224 24=
2 254/var(--tw-bg-opacity)); }

.hover\:bg-teal-100:hover { --tw-bg-opacity: 1; background-color: rgb(204 2=
51 241/var(--tw-bg-opacity)); }

.hover\:bg-violet-100:hover { --tw-bg-opacity: 1; background-color: rgb(237=
 233 254/var(--tw-bg-opacity)); }

.hover\:bg-white:hover { --tw-bg-opacity: 1; background-color: rgb(255 255 =
255/var(--tw-bg-opacity)); }

.hover\:bg-yellow-100:hover { --tw-bg-opacity: 1; background-color: rgb(254=
 249 195/var(--tw-bg-opacity)); }

.hover\:text-amber-500:hover { --tw-text-opacity: 1; color: rgb(245 158 11/=
var(--tw-text-opacity)); }

.hover\:text-blue-500:hover { --tw-text-opacity: 1; color: rgb(59 130 246/v=
ar(--tw-text-opacity)); }

.hover\:text-cyan-500:hover { --tw-text-opacity: 1; color: rgb(6 182 212/va=
r(--tw-text-opacity)); }

.hover\:text-emerald-500:hover { --tw-text-opacity: 1; color: rgb(16 185 12=
9/var(--tw-text-opacity)); }

.hover\:text-fuchsia-500:hover { --tw-text-opacity: 1; color: rgb(217 70 23=
9/var(--tw-text-opacity)); }

.hover\:text-gray-500:hover { --tw-text-opacity: 1; color: rgb(107 114 128/=
var(--tw-text-opacity)); }

.hover\:text-gray-600:hover { --tw-text-opacity: 1; color: rgb(75 85 99/var=
(--tw-text-opacity)); }

.hover\:text-gray-700:hover { --tw-text-opacity: 1; color: rgb(55 65 81/var=
(--tw-text-opacity)); }

.hover\:text-gray-800:hover { --tw-text-opacity: 1; color: rgb(31 41 55/var=
(--tw-text-opacity)); }

.hover\:text-gray-900:hover { --tw-text-opacity: 1; color: rgb(17 24 39/var=
(--tw-text-opacity)); }

.hover\:text-green-500:hover { --tw-text-opacity: 1; color: rgb(34 197 94/v=
ar(--tw-text-opacity)); }

.hover\:text-indigo-500:hover { --tw-text-opacity: 1; color: rgb(99 102 241=
/var(--tw-text-opacity)); }

.hover\:text-lime-500:hover { --tw-text-opacity: 1; color: rgb(132 204 22/v=
ar(--tw-text-opacity)); }

.hover\:text-orange-500:hover { --tw-text-opacity: 1; color: rgb(249 115 22=
/var(--tw-text-opacity)); }

.hover\:text-pink-500:hover { --tw-text-opacity: 1; color: rgb(236 72 153/v=
ar(--tw-text-opacity)); }

.hover\:text-primary-base:hover { --tw-text-opacity: 1; color: rgb(62 192 2=
22/var(--tw-text-opacity)); }

.hover\:text-primary-darkest:hover { --tw-text-opacity: 1; color: rgb(10 13=
6 164/var(--tw-text-opacity)); }

.hover\:text-purple-500:hover { --tw-text-opacity: 1; color: rgb(168 85 247=
/var(--tw-text-opacity)); }

.hover\:text-red-500:hover { --tw-text-opacity: 1; color: rgb(239 68 68/var=
(--tw-text-opacity)); }

.hover\:text-red-600:hover { --tw-text-opacity: 1; color: rgb(220 38 38/var=
(--tw-text-opacity)); }

.hover\:text-rose-500:hover { --tw-text-opacity: 1; color: rgb(244 63 94/va=
r(--tw-text-opacity)); }

.hover\:text-sky-500:hover { --tw-text-opacity: 1; color: rgb(14 165 233/va=
r(--tw-text-opacity)); }

.hover\:text-slate-400:hover { --tw-text-opacity: 1; color: rgb(148 163 184=
/var(--tw-text-opacity)); }

.hover\:text-slate-600:hover { --tw-text-opacity: 1; color: rgb(71 85 105/v=
ar(--tw-text-opacity)); }

.hover\:text-slate-900:hover { --tw-text-opacity: 1; color: rgb(15 23 42/va=
r(--tw-text-opacity)); }

.hover\:text-stone-800:hover { --tw-text-opacity: 1; color: rgb(41 37 36/va=
r(--tw-text-opacity)); }

.hover\:text-teal-500:hover { --tw-text-opacity: 1; color: rgb(20 184 166/v=
ar(--tw-text-opacity)); }

.hover\:text-violet-500:hover { --tw-text-opacity: 1; color: rgb(139 92 246=
/var(--tw-text-opacity)); }

.hover\:text-yellow-500:hover { --tw-text-opacity: 1; color: rgb(234 179 8/=
var(--tw-text-opacity)); }

.hover\:underline:hover { text-decoration-line: underline; }

.hover\:opacity-100:hover { opacity: 1; }

.hover\:shadow-lg:hover { --tw-shadow: 0 10px 15px -3px rgba(0,0,0,.1),0 4p=
x 6px -4px rgba(0,0,0,.1); --tw-shadow-colored: 0 10px 15px -3px var(--tw-s=
hadow-color),0 4px 6px -4px var(--tw-shadow-color); }

.hover\:shadow-lg:hover, .hover\:shadow-md:hover { box-shadow: var(--tw-rin=
g-offset-shadow,0 0 #0000),var(--tw-ring-shadow,0 0 #0000),var(--tw-shadow)=
; }

.hover\:shadow-md:hover { --tw-shadow: 0 4px 6px -1px rgba(0,0,0,.1),0 2px =
4px -2px rgba(0,0,0,.1); --tw-shadow-colored: 0 4px 6px -1px var(--tw-shado=
w-color),0 2px 4px -2px var(--tw-shadow-color); }

.focus\:border-amber-500:focus { --tw-border-opacity: 1; border-color: rgb(=
245 158 11/var(--tw-border-opacity)); }

.focus\:border-blue-500:focus { --tw-border-opacity: 1; border-color: rgb(5=
9 130 246/var(--tw-border-opacity)); }

.focus\:border-cyan-500:focus { --tw-border-opacity: 1; border-color: rgb(6=
 182 212/var(--tw-border-opacity)); }

.focus\:border-emerald-500:focus { --tw-border-opacity: 1; border-color: rg=
b(16 185 129/var(--tw-border-opacity)); }

.focus\:border-fuchsia-500:focus { --tw-border-opacity: 1; border-color: rg=
b(217 70 239/var(--tw-border-opacity)); }

.focus\:border-gray-700:focus { --tw-border-opacity: 1; border-color: rgb(5=
5 65 81/var(--tw-border-opacity)); }

.focus\:border-green-500:focus { --tw-border-opacity: 1; border-color: rgb(=
34 197 94/var(--tw-border-opacity)); }

.focus\:border-green-700:focus { --tw-border-opacity: 1; border-color: rgb(=
21 128 61/var(--tw-border-opacity)); }

.focus\:border-indigo-500:focus { --tw-border-opacity: 1; border-color: rgb=
(99 102 241/var(--tw-border-opacity)); }

.focus\:border-lime-500:focus { --tw-border-opacity: 1; border-color: rgb(1=
32 204 22/var(--tw-border-opacity)); }

.focus\:border-orange-500:focus { --tw-border-opacity: 1; border-color: rgb=
(249 115 22/var(--tw-border-opacity)); }

.focus\:border-pink-500:focus { --tw-border-opacity: 1; border-color: rgb(2=
36 72 153/var(--tw-border-opacity)); }

.focus\:border-primary-base:focus { --tw-border-opacity: 1; border-color: r=
gb(62 192 222/var(--tw-border-opacity)); }

.focus\:border-primary-darkest:focus { --tw-border-opacity: 1; border-color=
: rgb(10 136 164/var(--tw-border-opacity)); }

.focus\:border-purple-500:focus { --tw-border-opacity: 1; border-color: rgb=
(168 85 247/var(--tw-border-opacity)); }

.focus\:border-red-500:focus { --tw-border-opacity: 1; border-color: rgb(23=
9 68 68/var(--tw-border-opacity)); }

.focus\:border-red-700:focus { --tw-border-opacity: 1; border-color: rgb(18=
5 28 28/var(--tw-border-opacity)); }

.focus\:border-rose-500:focus { --tw-border-opacity: 1; border-color: rgb(2=
44 63 94/var(--tw-border-opacity)); }

.focus\:border-sky-500:focus { --tw-border-opacity: 1; border-color: rgb(14=
 165 233/var(--tw-border-opacity)); }

.focus\:border-teal-500:focus { --tw-border-opacity: 1; border-color: rgb(2=
0 184 166/var(--tw-border-opacity)); }

.focus\:border-transparent:focus { border-color: transparent; }

.focus\:border-violet-500:focus { --tw-border-opacity: 1; border-color: rgb=
(139 92 246/var(--tw-border-opacity)); }

.focus\:border-yellow-500:focus { --tw-border-opacity: 1; border-color: rgb=
(234 179 8/var(--tw-border-opacity)); }

.focus\:text-primary-dark:focus { --tw-text-opacity: 1; color: rgb(18 161 1=
92/var(--tw-text-opacity)); }

.focus\:underline:focus { text-decoration-line: underline; }

.focus\:outline-none:focus { outline: transparent solid 2px; outline-offset=
: 2px; }

.focus\:ring:focus { --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 va=
r(--tw-ring-offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: va=
r(--tw-ring-inset) 0 0 0 calc(3px + var(--tw-ring-offset-width)) var(--tw-r=
ing-color); }

.focus\:ring-0:focus, .focus\:ring:focus { box-shadow: var(--tw-ring-offset=
-shadow),var(--tw-ring-shadow),var(--tw-shadow,0 0 #0000); }

.focus\:ring-0:focus { --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 =
var(--tw-ring-offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: =
var(--tw-ring-inset) 0 0 0 calc(var(--tw-ring-offset-width)) var(--tw-ring-=
color); }

.focus\:ring-4:focus { --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 =
var(--tw-ring-offset-width) var(--tw-ring-offset-color); --tw-ring-shadow: =
var(--tw-ring-inset) 0 0 0 calc(4px + var(--tw-ring-offset-width)) var(--tw=
-ring-color); box-shadow: var(--tw-ring-offset-shadow),var(--tw-ring-shadow=
),var(--tw-shadow,0 0 #0000); }

.focus\:ring-amber-500\/20:focus { --tw-ring-color: rgba(245,158,11,.2); }

.focus\:ring-blue-500\/20:focus { --tw-ring-color: rgba(59,130,246,.2); }

.focus\:ring-cyan-500\/20:focus { --tw-ring-color: rgba(6,182,212,.2); }

.focus\:ring-emerald-500\/20:focus { --tw-ring-color: rgba(16,185,129,.2); =
}

.focus\:ring-fuchsia-500\/20:focus { --tw-ring-color: rgba(217,70,239,.2); =
}

.focus\:ring-green-500\/20:focus { --tw-ring-color: rgba(34,197,94,.2); }

.focus\:ring-indigo-500\/20:focus { --tw-ring-color: rgba(99,102,241,.2); }

.focus\:ring-lime-500\/20:focus { --tw-ring-color: rgba(132,204,22,.2); }

.focus\:ring-orange-500\/20:focus { --tw-ring-color: rgba(249,115,22,.2); }

.focus\:ring-pink-500\/20:focus { --tw-ring-color: rgba(236,72,153,.2); }

.focus\:ring-primary-base:focus { --tw-ring-opacity: 1; --tw-ring-color: rg=
b(62 192 222/var(--tw-ring-opacity)); }

.focus\:ring-primary-light:focus { --tw-ring-opacity: 1; --tw-ring-color: r=
gb(223 249 255/var(--tw-ring-opacity)); }

.focus\:ring-primary-lightest:focus { --tw-ring-opacity: 1; --tw-ring-color=
: rgb(240 252 255/var(--tw-ring-opacity)); }

.focus\:ring-purple-500\/20:focus { --tw-ring-color: rgba(168,85,247,.2); }

.focus\:ring-red-500\/20:focus { --tw-ring-color: rgba(239,68,68,.2); }

.focus\:ring-rose-500\/20:focus { --tw-ring-color: rgba(244,63,94,.2); }

.focus\:ring-sky-500\/20:focus { --tw-ring-color: rgba(14,165,233,.2); }

.focus\:ring-teal-500\/20:focus { --tw-ring-color: rgba(20,184,166,.2); }

.focus\:ring-violet-500\/20:focus { --tw-ring-color: rgba(139,92,246,.2); }

.focus\:ring-yellow-500\/20:focus { --tw-ring-color: rgba(234,179,8,.2); }

.focus\:before\:absolute:focus::before { content: var(--tw-content); positi=
on: absolute; }

.focus\:before\:right-full:focus::before { content: var(--tw-content); righ=
t: 100%; }

.focus\:before\:top-\[1px\]:focus::before { content: var(--tw-content); top=
: 1px; }

.focus\:before\:mr-\[2px\]:focus::before { content: var(--tw-content); marg=
in-right: 2px; }

.focus\:before\:text-2xs:focus::before { content: var(--tw-content); font-s=
ize: 10px; }

.focus\:before\:content-\[\'Copied\'\]:focus::before { --tw-content: "Copie=
d"; content: var(--tw-content); }

.active\:bg-gray-700:active { --tw-bg-opacity: 1; background-color: rgb(55 =
65 81/var(--tw-bg-opacity)); }

.active\:bg-green-700:active { --tw-bg-opacity: 1; background-color: rgb(21=
 128 61/var(--tw-bg-opacity)); }

.active\:bg-primary-darkest:active { --tw-bg-opacity: 1; background-color: =
rgb(10 136 164/var(--tw-bg-opacity)); }

.active\:bg-red-700:active { --tw-bg-opacity: 1; background-color: rgb(185 =
28 28/var(--tw-bg-opacity)); }

.disabled\:cursor-not-allowed:disabled { cursor: not-allowed; }

.disabled\:bg-gray-50:disabled { --tw-bg-opacity: 1; background-color: rgb(=
249 250 251/var(--tw-bg-opacity)); }

.disabled\:text-black\/20:disabled { color: rgba(0, 0, 0, 0.2); }

.disabled\:opacity-50:disabled { opacity: 0.5; }

.disabled\:opacity-90:disabled { opacity: 0.9; }

.group:hover .group-hover\:-translate-x-6 { --tw-translate-x: -24px; transf=
orm: translate(var(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw=
-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-s=
cale-x)) scaleY(var(--tw-scale-y)); }

.group:hover .group-hover\:bg-primary-base { --tw-bg-opacity: 1; background=
-color: rgb(62 192 222/var(--tw-bg-opacity)); }

.group:hover .group-hover\:bg-slate-400 { --tw-bg-opacity: 1; background-co=
lor: rgb(148 163 184/var(--tw-bg-opacity)); }

.group:hover .group-hover\:opacity-100 { opacity: 1; }

@media (min-width: 640px) {
  .sm\:col-start-1 { grid-column-start: 1; }
  .sm\:col-start-2 { grid-column-start: 2; }
  .sm\:mx-0 { margin-left: 0px; margin-right: 0px; }
  .sm\:mt-0 { margin-top: 0px; }
  .sm\:mt-6 { margin-top: 24px; }
  .sm\:mt-8 { margin-top: 32px; }
  .sm\:grid { display: grid; }
  .sm\:h-10 { height: 40px; }
  .sm\:w-10 { width: 40px; }
  .sm\:max-w-3xl { max-width: 768px; }
  .sm\:scale-100 { --tw-scale-x: 1; --tw-scale-y: 1; transform: translate(v=
ar(--tw-translate-x),var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(=
var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(=
var(--tw-scale-y)); }
  .sm\:grid-flow-row-dense { grid-auto-flow: dense; }
  .sm\:grid-cols-2 { grid-template-columns: repeat(2, minmax(0px, 1fr)); }
  .sm\:gap-3 { gap: 12px; }
  .sm\:p-4 { padding: 16px; }
  .sm\:px-8 { padding-left: 32px; padding-right: 32px; }
  .sm\:text-left { text-align: left; }
  .sm\:align-middle { vertical-align: middle; }
  .sm\:text-sm { font-size: 14px; }
  .sm\:leading-5 { line-height: 20px; }
}

@media (min-width: 1024px) {
  .lg\:inline-flex { display: inline-flex; }
}
------MultipartBoundary--tnlCDEymNh4kqPAHYgyDfFLtftrP4FXhODZa0L28jl------
